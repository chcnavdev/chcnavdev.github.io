{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u9996\u9875","text":"<p>\u672c\u6587\u7cfb\u4e0a\u6d77\u534e\u6d4b\u5bfc\u822a\u6280\u672f\u80a1\u4efd\u6709\u9650\u516c\u53f8GnssServer\u7cfb\u7edf\u5f00\u53d1\u624b\u518c\uff0c\u8be6\u7ec6\u8bf4\u660e\u5404\u4e2a\u63a5\u53e3\u7684\u4f5c\u7528\uff0c\u4ee5\u53ca\u5404\u53c2\u6570\u7684\u542b\u4e49\uff0c\u7528\u4e8e\u6307\u5bfc\u60a8\u4f7f\u7528GnssServer\u505a\u4e8c\u6b21\u5f00\u53d1\u3002</p> <p>\u4f7f\u7528\u672c\u4ea7\u54c1\u4e4b\u524d\uff0c\u8bf7\u60a8\u52a1\u5fc5\u4ed4\u7ec6\u9605\u8bfb\u60a8\u6307\u5357\uff0c\u4ee5\u4fbf\u66f4\u597d\u5730\u4f7f\u7528\u672c\u4ea7\u54c1\u3002\u5982\u679c\u672a\u6309\u7167\u672c\u6587\u7684\u8981\u6c42\u800c\u64cd\u4f5c\uff0c\u6216\u672a\u80fd\u6b63\u786e\u7406\u89e3\u672c\u6587\u7684\u8981\u6c42\u800c\u8bef\u64cd\u4f5c\u7684\u884c\u4e3a\uff0c\u5176\u6240\u9020\u6210\u7684\u76f8\u5173\u635f\u5931\uff0c\u4e0a\u6d77\u534e\u6d4b\u5bfc\u822a\u6280\u672f\u80a1\u4efd\u6709\u9650\u516c\u53f8\u4e0d\u4f1a\u627f\u62c5\u8d23\u4efb\uff1b\u4f46\u6211\u4eec\u5c06\u81f4\u529b\u4e8e\u4e0d\u65ad\u6539\u8fdb\u4ea7\u54c1\u529f\u80fd\u548c\u6027\u80fd\u3001\u63d0\u9ad8\u670d\u52a1\u8d28\u91cf\uff0c\u5e76\u4fdd\u7559\u5bf9\u624b\u518c\u7684\u5185\u5bb9\u8fdb\u884c\u66f4\u6539\u3001\u4f18\u5316\u4e0e\u5b8c\u5584\u7684\u6743\u5229\uff0c\u5e76\u5b9a\u671f\u4ee5\u5347\u7ea7\u53d1\u5e03\u7684\u5f62\u5f0f\u544a\u77e5\u66f4\u65b0\u5185\u5bb9\uff0c\u6545\u8bf7\u7559\u610f\u6211\u53f8\u5b98\u65b9\u7f51\u7ad9\uff08www.huace.cn\uff09\u6700\u65b0\u53d1\u5e03\u4fe1\u606f\u3002</p> <p>\u534e\u6d4b\u7f51\u7ad9\u5f00\u542f\u4e86\u201c\u670d\u52a1\u4e0e\u4e0b\u8f7d\u201d\u7248\u5757\uff0c\u5982\u679c\u60a8\u6709\u95ee\u9898\u53ef\u4ee5\u901a\u8fc7\u201c\u610f\u89c1\u53cd\u9988\u201d\u8fdb\u884c\u7559\u8a00\uff0c\u6216\u76f4\u63a5\u62e8\u6253\u6280\u672f\u54a8\u8be2\u7535\u8bdd\uff1a021-51508100\uff0c\u6211\u4eec\u4f1a\u53ca\u65f6\u89e3\u7b54\u60a8\u7684\u95ee\u9898\u3002</p> <p>\u5982\u679c\u60a8\u5bf9\u672c\u8bf4\u660e\u4e66\u6709\u4ec0\u4e48\u5efa\u8bae\u548c\u610f\u89c1\uff0c\u8bf7\u767b\u9646\u534e\u6d4b\u5b98\u65b9\u7f51\u7ad9\uff0c\u5728\u201c\u6280\u672f\u670d\u52a1\u201d \u2192\u201c\u5efa\u8bae\u4e0e\u8bc9\u201d\u7248\u5757\u7559\u8a00\uff0c\u60a8\u7684\u53cd\u9988\u4fe1\u606f\u5bf9\u6211\u4eec\u8bf4\u660e\u4e66\u7684\u8d28\u91cf\u5c06\u4f1a\u6709\u5f88\u5927\u7684\u63d0\u9ad8\u3002</p>"},{"location":"AR%E6%94%BE%E6%A0%B7/","title":"AR\u653e\u6837","text":"<p>\u672c\u8282\u65e8\u5728\u5e2e\u52a9\u5f00\u53d1\u8005\u5feb\u901f\u96c6\u6210\u5e76\u4f7f\u7528AR\u653e\u6837\u529f\u80fd\u3002SDK\u4f9d\u8d56\u7684\u6838\u5fc3\u6a21\u5757\u662fbusiness\uff0c\u901a\u8fc7\u96c6\u6210ArViewLayout\u548cArPointStakeoutController\uff0c\u5f00\u53d1\u8005\u80fd\u591f\u5b9e\u73b0\u4e0eAR\u76f8\u5173\u7684\u653e\u6837\u529f\u80fd\u3002\u6587\u6863\u5c06\u91cd\u70b9\u4ecb\u7ecd\u5982\u4f55\u914d\u7f6e\u3001\u521d\u59cb\u5316\u4ee5\u53ca\u4f7f\u7528\u76f8\u5173API\uff0c\u540c\u65f6\u4e5f\u4f1a\u6d89\u53ca\u5230\u89c6\u56fe\u7684\u5e03\u5c40\u548cUI\u7ec4\u4ef6\u7684\u914d\u7f6e\u3002</p>"},{"location":"AR%E6%94%BE%E6%A0%B7/#_1","title":"\u5e03\u5c40","text":"<p>\u5728\u5e03\u5c40\u6587\u4ef6\u4e2d\uff0cArViewLayout\u7528\u4e8e\u627f\u8f7dAR\u89c6\u56fe\u3002\u8be5\u5e03\u5c40\u5c06\u4e3aAR\u89c6\u56fe\u63d0\u4f9b\u4e00\u4e2a\u5360\u636e\u5c4f\u5e55\u7684\u533a\u57df\uff0c\u540e\u7eed\u7684AR\u64cd\u4f5c\u5c06\u901a\u8fc7ArViewLayout\u5c55\u793a\u3002\u5177\u4f53\u5982\u4e0b\uff1a</p> <pre><code>&lt;com.huace.gnssserver.business.api.ar.ArViewLayout\n    android:id=\"@+id/viewAr\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"0dp\"\n    android:layout_weight=\"1\" /&gt;\n</code></pre>"},{"location":"AR%E6%94%BE%E6%A0%B7/#ar","title":"\u521d\u59cb\u5316AR\u529f\u80fd","text":"<p>\u521b\u5efa\u5e76\u521d\u59cb\u5316ArPointStakeoutController\u7684\u6b65\u9aa4\u548c\u4ee3\u7801\u5982\u4e0b\uff1a</p> <ol> <li>\u5728onCreate\u65b9\u6cd5\u4e2d\uff0c\u9996\u5148\u521d\u59cb\u5316ArViewLayout\u5e76\u521b\u5efaArPointStakeoutController\u5b9e\u4f8b\uff1b</li> <li>ArPointStakeoutController\u7528\u4e8e\u63a7\u5236AR\u89c6\u56fe\u7684\u64cd\u4f5c\uff0c\u5e76\u7ba1\u7406\u4e0eAR\u76f8\u5173\u7684\u653e\u6837\u529f\u80fd\uff1b</li> <li>ArPointStakeoutController\u7684\u6784\u9020\u51fd\u6570\u63a5\u6536\u4e24\u4e2a\u53c2\u6570\uff1aContext\u548cArViewLayout\uff0c\u5e76\u7ed1\u5b9a\u4e86IArModeListener\uff0c\u4ee5\u4fbf\u76d1\u542cAR\u6a21\u5f0f\u7684\u72b6\u6001\u53d8\u5316\uff1b</li> </ol> <pre><code>private void initAr() throws RemoteException {\n    ArViewLayout arViewLayout = findViewById(R.id.viewAr);\n    mArPointStakeoutController = new ArPointStakeoutController(\n            this, \n            arViewLayout, \n            new IArModeListener() {\n                @Override\n                public void onBeforeEnter() {\n                    // Callback before entering AR mode\n                }\n\n                @Override\n                public void onAfterExit() {\n                    // Callback after exiting AR mode\n                }\n            }\n    );\n}\n</code></pre>"},{"location":"AR%E6%94%BE%E6%A0%B7/#ar_1","title":"\u8bbe\u7f6eAR\u64cd\u4f5c","text":"<p>\u5173\u4e8eAR\u5e38\u89c1\u7684\u64cd\u4f5c\u548c\u4ee3\u7801\u5982\u4e0b\uff1a</p> <ol> <li>\u6253\u5f00/\u5173\u95ed\u76f8\u673a\uff1aArPointStakeoutController\u63d0\u4f9b\u4e86open()\u548cclose()\u65b9\u6cd5\uff0c\u5206\u522b\u7528\u4e8e\u6253\u5f00\u548c\u5173\u95edAR\u89c6\u56fe\u4e2d\u7684\u76f8\u673a\uff1b</li> <li>\u8bbe\u7f6e\u76ee\u6807\u70b9\uff1a\u4f7f\u7528setTargetPointOfSrcBlh()\u65b9\u6cd5\uff0c\u53ef\u4ee5\u8bbe\u7f6eAR\u89c6\u56fe\u4e2d\u7684\u76ee\u6807\u70b9\u3002\u76ee\u6807\u70b9\u901a\u8fc7Point3DMutable\u4f20\u9012\uff1b</li> </ol> <pre><code>// Turn the camera on or off\nfindViewById(R.id.openCamera).setOnClickListener(view -&gt; {\n    mArPointStakeoutController.open();\n});\n\n// Set target points\nfindViewById(R.id.closeCamera).setOnClickListener(view -&gt; {\n    mArPointStakeoutController.close();\n});\n</code></pre>"},{"location":"AR%E6%94%BE%E6%A0%B7/#_2","title":"\u76f8\u673a\u5207\u6362","text":"<p>ArSettings \u7c7b\u662f\u4e00\u4e2a\u914d\u7f6e\u7c7b\uff0c\u7528\u4e8e\u5b58\u50a8\u548c\u83b7\u53d6\u4e0eAR\u6a21\u5f0f\u76f8\u5173\u7684\u8ddd\u79bb\u8bbe\u7f6e\uff0c\u5373\u6444\u50cf\u5934\u5207\u6362\u7684\u81ea\u52a8\u8ddd\u79bb\u9608\u503c\u3002\u8fd9\u4e2a\u7c7b\u901a\u8fc7\u9759\u6001\u53d8\u91cf\u548c\u9759\u6001\u65b9\u6cd5\u6765\u5b9e\u73b0\u5168\u5c40\u914d\u7f6e\uff0c\u53ef\u4ee5\u5728\u9879\u76ee\u4e2d\u7684\u5176\u4ed6\u5730\u65b9\u4f7f\u7528\u8fd9\u4e9b\u914d\u7f6e\u8fdb\u884c\u64cd\u4f5c\uff0c\u6bd4\u5982\u81ea\u52a8\u5207\u6362\u76f8\u673a\u6a21\u5f0f\u7b49\uff0c\u4f7f\u7528\u573a\u666f\u5982\u4e0b\uff1a</p> <ol> <li>\u81ea\u52a8\u76f8\u673a\u5207\u6362\uff1a\u5728AR\u653e\u6837\u8fc7\u7a0b\u4e2d\uff0c\u5f53\u7528\u6237\u7684\u8bbe\u5907\u4e0e\u76ee\u6807\u70b9\u7684\u8ddd\u79bb\u53d1\u751f\u53d8\u5316\u65f6\uff0cArSettings \u5141\u8bb8\u7cfb\u7edf\u81ea\u52a8\u5207\u6362\u524d\u6444\u76f8\u673a\u548c\u4e0b\u6444\u76f8\u673a\uff0c\u4ee5\u786e\u4fddAR\u663e\u793a\u6548\u679c\u7684\u6700\u4f73\u5316\u3002\u4f8b\u5982\uff0c\u5f53\u8bbe\u5907\u8ddd\u79bb\u76ee\u6807\u8f83\u8fdc\u65f6\uff0c\u7cfb\u7edf\u53ef\u4ee5\u81ea\u52a8\u5207\u6362\u5230\u524d</li> <li>\u8c03\u8bd5\u4e0e\u4f18\u5316\uff1a\u5728\u5f00\u53d1\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7\u8c03\u6574\u8fd9\u4e24\u4e2a\u8ddd\u79bb\u9608\u503c\u6765\u4fbf\u6377\u8c03\u8bd5\u76f8\u673a\u7684\u5207\u6362\uff1b</li> </ol> <p>\u5982\u4e0b\u4e3a\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u4fbf\u6377\u8c03\u8bd5\u7684\u793a\u4f8b\u4ee3\u7801\uff1a</p> <pre><code>// Camera switch\nfindViewById(R.id.switchCamera).setOnClickListener(view -&gt; {\n    double dist = mArPointStakeoutController.getDist();\n    if (dist &gt; ArSettings.getFarDistOfAutoSwitchToArMode()) {\n        ArSettings.setFarDistOfAutoSwitchToArMode(dist + 20);\n        return;\n    }\n    if (dist &gt; ArSettings.getGroundDistOfAutoSwitchToArMode()) {\n        ArSettings.setGroundDistOfAutoSwitchToArMode(dist + 2);\n    } else {\n        ArSettings.setGroundDistOfAutoSwitchToArMode(dist - 2);\n    }\n});\n</code></pre> <p>ArSettings\u7c7b\u4e3aAR\u653e\u6837\u5e94\u7528\u63d0\u4f9b\u4e86\u7075\u6d3b\u7684\u81ea\u52a8\u5207\u6362\u76f8\u673a\u7684\u914d\u7f6e\u3002\u901a\u8fc7\u8bbe\u7f6egroundDistOfAutoSwitchToArMode\u548cfarDistOfAutoSwitchToArMode\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u63a7\u5236\u4f55\u65f6\u5207\u6362\u5230\u4e0b\u6444\u76f8\u673a\u6216\u524d\u6444\u76f8\u673a\uff0c\u4ece\u800c\u63d0\u4f9b\u66f4\u597d\u7684\u7528\u6237\u4f53\u9a8c\u3002</p>"},{"location":"AR%E6%94%BE%E6%A0%B7/#_3","title":"\u5b8c\u6574\u4ee3\u7801","text":"<pre><code>public class ArStakeoutActivity extends AppCompatActivity {\n\n    private TextView tvB;\n    private TextView tvL;\n    private TextView tvH;\n    private TextView tvPositionState;\n\n    private ArPointStakeoutController mArPointStakeoutController;\n    private Point3DMutable mPoint3DMutable;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_ar_stakeout);\n        initAr();\n        initView();\n        initClickListener();\n    }\n\n    private void initAr() {\n        ArViewLayout arViewLayout = findViewById(R.id.viewAr);\n        mArPointStakeoutController =\n                new ArPointStakeoutController(this, arViewLayout, new IArModeListener() {\n                    @Override\n                    public void onBeforeEnter() {\n                    // Callback before entering AR mode\n                    }\n\n                    @Override\n                    public void onAfterExit() {\n                    // Callback after exiting AR mode\n                    }\n                });\n    }\n\n    private void initView() {\n        tvB = (TextView) findViewById(R.id.tvB);\n        tvL = (TextView) findViewById(R.id.tvL);\n        tvH = (TextView) findViewById(R.id.tvH);\n        tvPositionState = (TextView) findViewById(R.id.tvPositionState);\n        try {\n            PositionSource.getInstance().addListener(new IPositionListener.Stub() {\n                @Override\n                public void onCoordinatePosition(SurveyPointPositionInfo positionInfo) {\n                    runOnUiThread(new Runnable() {\n                        @Override\n                        public void run() {\n                            updatePositionInfoUi(positionInfo);\n                        }\n                    });\n                }\n            });\n        } catch (RemoteException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private void initClickListener() {\n        // Convenient debugging, switching between the ground camera and the front camera with one click\n        findViewById(R.id.switchCamera).setOnClickListener(view -&gt; {\n            // Automatically switch to the front camera when the distance is between\n            // ArSettings.getGroundDistOfAutoSwitchToArMode() and ArSettings.getFarDistOfAutoSwitchToArMode().\n            // Automatically switch to the ground camera when the distance is less than\n            // ArSettings.getGroundDistOfAutoSwitchToArMode().\n            // The following logic ensures automatic switching between the ground camera and the front camera.\n            double dist = mArPointStakeoutController.getDist();\n            if (dist &gt; ArSettings.getFarDistOfAutoSwitchToArMode()) {\n                // Update the far distance threshold to allow further switching when the distance increases\n                ArSettings.setFarDistOfAutoSwitchToArMode(dist + 20);\n                return;\n            }\n            if (dist &gt; ArSettings.getGroundDistOfAutoSwitchToArMode()) {\n                // Slightly increase the ground distance threshold for smoother switching\n                ArSettings.setGroundDistOfAutoSwitchToArMode(dist + 2);\n            } else {\n                // Slightly decrease the ground distance threshold for smoother switching\n                ArSettings.setGroundDistOfAutoSwitchToArMode(dist - 2);\n            }\n        });\n\n        findViewById(R.id.setTarget).setOnClickListener(view -&gt; {\n            if (mPoint3DMutable != null) {\n                Point3DMutable target = new Point3DMutable(mPoint3DMutable);\n                mArPointStakeoutController.setTargetPointOfSrcBlh(target);\n            }\n        });\n\n        findViewById(R.id.openCamera).setOnClickListener(view -&gt; {\n            mArPointStakeoutController.open();\n        });\n\n        findViewById(R.id.closeCamera).setOnClickListener(view -&gt; {\n            mArPointStakeoutController.close();\n        });\n    }\n\n    @Override\n    protected void onResume() {\n        super.onResume();\n        mArPointStakeoutController.onResume();\n    }\n\n    @Override\n    protected void onPause() {\n        super.onPause();\n        mArPointStakeoutController.onPause();\n    }\n\n    // Render the coordinate information to the page\n    private void updatePositionInfoUi(@NonNull SurveyPointPositionInfo surveyPointPositionInfo) {\n        Position position = surveyPointPositionInfo.getCoorKernal().getWgsBlh();\n        mPoint3DMutable = new Point3DMutable(\n                position.getX(),\n                position.getY(),\n                position.getZ()\n        );\n        tvB.setText(String.valueOf(position.getX()));\n        tvL.setText(String.valueOf(position.getY()));\n        tvH.setText(String.valueOf(position.getZ()));\n        tvPositionState.setText(String.valueOf(surveyPointPositionInfo.getSolveStatus().getValue()));\n    }\n}\n</code></pre>"},{"location":"CORS%E8%BF%9E%E6%8E%A5/","title":"CORS\u8fde\u63a5","text":"<p>CORS\u8fde\u63a5\u4e4b\u524d\uff0c\u60a8\u9700\u8981\u51c6\u5907\u7528\u4e8eCORS\u8fde\u63a5\u7684\u8d26\u53f7\u3001\u5bc6\u7801\u3001\u6e90\u4ee5\u53ca\u5bf9\u5e94\u7684IP\u5730\u5740\u548c\u7aef\u53e3\u53f7\uff0c\u5177\u4f53\u7684\u8fde\u63a5\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>mCorsConnect.setOnClickListener(new View.OnClickListener() {\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0@Override\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0public void onClick(View view) {\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0DiffDataInfo diffDataInfo = new DiffDataInfo();\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// ip, port\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0AddressInfo addressInfo = new AddressInfo(\"*.*.*.*\", *); \u00a0 \u00a0\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0diffDataInfo.setAddressInfo(addressInfo);\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0diffDataInfo.setDiffType(\"diffType\");\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// source\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0diffDataInfo.setSourcePoint(\"***\");\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0//account\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0diffDataInfo.setUserName(\"****\"); \n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// password\u00a0 \u00a0 \n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0diffDataInfo.setPassWord(\"****\"); \u00a0 \u00a0 \n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// setting listener\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0DiffConnectManager.getInstance().addListener(new IDiffListener() {\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0@Override\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0public void onConnectStatusChanged(boolean b, @NonNull NtripProtocolCode ntripProtocolCode) {\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 .......\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  }\n\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0@Override\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0public void onPdaWorkModeStatusChanged(@NonNull EmPdaWorkModeStatus emPdaWorkModeStatus) {\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0.......\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  }\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  });\n\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0DiffConnectManager.getInstance().connect(diffDataInfo);\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  }\n \u00a0 \u00a0 \u00a0  });\n\n \u00a0 \u00a0 \u00a0 \u00a0mCorsDisConnect.setOnClickListener(new View.OnClickListener() {\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0@Override\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0public void onClick(View view) {\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0DiffConnectManager.getInstance().disConnect();\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  }\n \u00a0 \u00a0 \u00a0  });\n</code></pre>"},{"location":"IMU/","title":"IMU","text":""},{"location":"IMU/#_1","title":"\u5750\u6807\u4fe1\u606f","text":"<p>\u5982\u679c\u60a8\u9700\u8981\u4f7f\u7528\u60ef\u6027\u5bfc\u822a\u529f\u80fd\uff0c\u53ef\u4ee5\u901a\u8fc7\u83b7\u53d6 SurveyPointPositionInfo \u7c7b\u7684\u5b9e\u4f8b\u5e76\u6dfb\u52a0\u76d1\u542c\u5668\uff0c\u4ee5\u83b7\u53d6\u60ef\u5bfc\u72b6\u6001\u4e0b\u7684\u5750\u6807\u4fe1\u606f\u3002\u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\uff0c\u60a8\u65e0\u9700\u5173\u5fc3\u6570\u636e\u6e90\u7684\u5207\u6362\uff0c\u5373\u65e0\u9700\u6839\u636e\u60ef\u5bfc\u72b6\u6001\u624b\u52a8\u5207\u6362\u6570\u636e\u6e90\u3002\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b\uff1a</p> <pre><code>// Listening for coordinate information\nPositionSource.getInstance().addListener(new IPositionListener.Stub() {\n    @Override\n    public void onCoordinatePosition(SurveyPointPositionInfo positionInfo) {\n        runOnUiThread(new Runnable() {\n            @Override\n            public void run() {\n                updatePositionInfoUi(positionInfo);\n            }\n        });\n    }\n});\n\n// Render the coordinate information to the page\nprivate void updatePositionInfoUi(@NonNull SurveyPointPositionInfo surveyPointPositionInfo) {\n    Position position = surveyPointPositionInfo.getCoorKernal().getWgsBlh();\n    mTVB.setText(String.valueOf(position.getX()));\n    mTVL.setText(String.valueOf(position.getY()));\n    mTVH.setText(String.valueOf(position.getZ()));\n}\n</code></pre>"},{"location":"IMU/#imu","title":"\u5f00\u542f\u6216\u5173\u95edIMU","text":"<p>\u60a8\u53ef\u4ee5\u901a\u8fc7 ReceiverCmdManager \u7c7b\u5411\u63a5\u6536\u673a\u53d1\u9001\u547d\u4ee4\u3002\u56e0\u6b64\uff0cIMU \u7684\u5f00\u542f\u6216\u5173\u95ed\u64cd\u4f5c\u4e5f\u662f\u901a\u8fc7\u8be5\u7c7b\u8fdb\u884c\u7684\u3002\u5177\u4f53\u7684\u64cd\u4f5c\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>    private void setIMUListener() {\n        mOpenIMU.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                NoneMagneticTiltStartInfo startInfo = new NoneMagneticTiltStartInfo();\n                // Setting the antenna height and frequency\n                startInfo.setAntennaHeight(0);\n                startInfo.setFrequency(EnumDataFrequency.DATA_FREQUENCY_5HZ);\n                isOpenIMU(true, startInfo);\n            }\n        });\n\n        mCloseIMU.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                isOpenIMU(false, null);\n            }\n        });\n    }\n\n    private void isOpenIMU(boolean isOpen, @Nullable NoneMagneticTiltStartInfo startInfo) {\n\n        if (isOpen &amp;&amp; (startInfo != null)) {\n            // Open IMU\n            ReceiverCmdManager.getInstance().setCmdStartNoneMagneticTilt(this, startInfo);\n        } else {\n            // Close IMU\n            ReceiverCmdManager.getInstance().setCmdStopNoneMagneticTilt(this);\n        }\n    }\n</code></pre>"},{"location":"IMU/#_2","title":"\u5176\u4ed6","text":"<p>\u5173\u4e8eIMU\u7684\u5176\u4ed6\u6570\u636e\uff0c\u60a8\u53ef\u4ee5\u53c2\u8003\"\u63a5\u6536\u673a\u901a\u4fe1\"\u4ece\u63a5\u6536\u673a\u83b7\u53d6\uff0c\u76f8\u5173\u4ee3\u7801\u5982\u4e0b:</p> <pre><code>public class ReceiverListener extends IReceiverListener.Stub {\n    private static final String TAG = \"ReceiverListener\";\n\n    // ......\n\n    @Override\n    public void getNoneMagneticTiltInfo(NoneMagneticTiltInfo info) throws RemoteException {\n        // Implementation of code related to obtaining data\n    }\n\n    // ......\n}\n</code></pre>"},{"location":"%E4%BF%AE%E8%AE%A2/","title":"\u4fee\u8ba2\u8bb0\u5f55","text":"\u4fee\u8ba2\u65e5\u671f \u4fee\u8ba2\u4eba \u4fee\u8ba2\u9879\u8bf4\u660e 2016-03-22 \u6c6a\u4fca \u65b0\u53d1\u884c 2016-11-25 \u6c6a\u4fca GNSSServer\u6539\u540d\u4e3aGNSSTool\u4ee5\u53ca\u6dfb\u52a0RTK\u8bbe\u7f6e\u63a5\u53e3\u8bf4\u660e 2017-05-18 \u97e9\u9e3f\u8fd0 \u6dfb\u52a0\u5750\u6807\u8f6c\u6362\u63a5\u53e3 2024-07-27 \u8bb8\u589e\u5b9d \u57fa\u4e8e\u65b0\u7248SDK\u91cd\u65b0\u4fee\u8ba2\uff0c\u8865\u5145\u4e86\u84dd\u7259\u6ce8\u5165\u8fde\u63a5\u793a\u4f8b 2024-08-12 \u8bb8\u589e\u5b9d \u6dfb\u52a0LT800H\u8fde\u63a5\u65b9\u5f0f\u3001\u5e38\u7528\u6570\u636e\u7c7b\u578b 2024-08-30 \u8bb8\u589e\u5b9d \u6dfb\u52a0CORS\u76d1\u542c\u3001\u5347\u7ea7\u81f3AndroidX 2024-10-08 \u8bb8\u589e\u5b9d \u6dfb\u52a0\u4e86\u6743\u9650\u76f8\u5173\u7684\u8bf4\u660e 2024-10-12 \u8bb8\u589e\u5b9d \u6dfb\u52a0\u4e86IMU\u76f8\u5173\u5185\u5bb9 2024-11-15 \u8bb8\u589e\u5b9d \u6dfb\u52a0\u4e86\u89c6\u9891\u6d41\u6570\u636e\u83b7\u53d6\u7684\u76f8\u5173\u5185\u5bb9 2024-12-02 \u8bb8\u589e\u5b9d \u6dfb\u52a0\u4e86Ar\u7684\u76f8\u5173\u5185\u5bb9 2025-01-16 \u8bb8\u589e\u5b9d \u6dfb\u52a0\u4e86\u83b7\u53d6\u57fa\u7ad9\u504f\u79fb\u8b66\u544a\u7684\u63a5\u53e3"},{"location":"%E5%89%8D%E8%A8%80/","title":"\u524d\u8a00","text":"<p>\u672c\u6587\u7cfb\u4e0a\u6d77\u534e\u6d4b\u5bfc\u822a\u6280\u672f\u80a1\u4efd\u6709\u9650\u516c\u53f8GnssServer\u7cfb\u7edf\u5f00\u53d1\u624b\u518c\uff0c\u8be6\u7ec6\u8bf4\u660e\u5404\u4e2a\u63a5\u53e3\u7684\u4f5c\u7528\uff0c\u4ee5\u53ca\u5404\u53c2\u6570\u7684\u542b\u4e49\uff0c\u7528\u4e8e\u6307\u5bfc\u60a8\u4f7f\u7528GnssServer\u505a\u4e8c\u6b21\u5f00\u53d1\u3002</p> <p>\u4f7f\u7528\u672c\u4ea7\u54c1\u4e4b\u524d\uff0c\u8bf7\u60a8\u52a1\u5fc5\u4ed4\u7ec6\u9605\u8bfb\u60a8\u6307\u5357\uff0c\u4ee5\u4fbf\u66f4\u597d\u5730\u4f7f\u7528\u672c\u4ea7\u54c1\u3002\u5982\u679c\u672a\u6309\u7167\u672c\u6587\u7684\u8981\u6c42\u800c\u64cd\u4f5c\uff0c\u6216\u672a\u80fd\u6b63\u786e\u7406\u89e3\u672c\u6587\u7684\u8981\u6c42\u800c\u8bef\u64cd\u4f5c\u7684\u884c\u4e3a\uff0c\u5176\u6240\u9020\u6210\u7684\u76f8\u5173\u635f\u5931\uff0c\u4e0a\u6d77\u534e\u6d4b\u5bfc\u822a\u6280\u672f\u80a1\u4efd\u6709\u9650\u516c\u53f8\u4e0d\u4f1a\u627f\u62c5\u8d23\u4efb\uff1b\u4f46\u6211\u4eec\u5c06\u81f4\u529b\u4e8e\u4e0d\u65ad\u6539\u8fdb\u4ea7\u54c1\u529f\u80fd\u548c\u6027\u80fd\u3001\u63d0\u9ad8\u670d\u52a1\u8d28\u91cf\uff0c\u5e76\u4fdd\u7559\u5bf9\u624b\u518c\u7684\u5185\u5bb9\u8fdb\u884c\u66f4\u6539\u3001\u4f18\u5316\u4e0e\u5b8c\u5584\u7684\u6743\u5229\uff0c\u5e76\u5b9a\u671f\u4ee5\u5347\u7ea7\u53d1\u5e03\u7684\u5f62\u5f0f\u544a\u77e5\u66f4\u65b0\u5185\u5bb9\uff0c\u6545\u8bf7\u7559\u610f\u6211\u53f8\u5b98\u65b9\u7f51\u7ad9\uff08www.huace.cn\uff09\u6700\u65b0\u53d1\u5e03\u4fe1\u606f\u3002</p> <p>\u534e\u6d4b\u7f51\u7ad9\u5f00\u542f\u4e86\u201c\u670d\u52a1\u4e0e\u4e0b\u8f7d\u201d\u7248\u5757\uff0c\u5982\u679c\u60a8\u6709\u95ee\u9898\u53ef\u4ee5\u901a\u8fc7\u201c\u610f\u89c1\u53cd\u9988\u201d\u8fdb\u884c\u7559\u8a00\uff0c\u6216\u76f4\u63a5\u62e8\u6253\u6280\u672f\u54a8\u8be2\u7535\u8bdd\uff1a021-51508100\uff0c\u6211\u4eec\u4f1a\u53ca\u65f6\u89e3\u7b54\u60a8\u7684\u95ee\u9898\u3002</p> <p>\u5982\u679c\u60a8\u5bf9\u672c\u8bf4\u660e\u4e66\u6709\u4ec0\u4e48\u5efa\u8bae\u548c\u610f\u89c1\uff0c\u8bf7\u767b\u9646\u534e\u6d4b\u5b98\u65b9\u7f51\u7ad9\uff0c\u5728\u201c\u6280\u672f\u670d\u52a1\u201d \u2192\u201c\u5efa\u8bae\u4e0e\u8bc9\u201d\u7248\u5757\u7559\u8a00\uff0c\u60a8\u7684\u53cd\u9988\u4fe1\u606f\u5bf9\u6211\u4eec\u8bf4\u660e\u4e66\u7684\u8d28\u91cf\u5c06\u4f1a\u6709\u5f88\u5927\u7684\u63d0\u9ad8\u3002</p>"},{"location":"%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2/","title":"\u5750\u6807\u8f6c\u6362","text":"<p>\u672c\u7ae0\u8282\u5c06\u4ecb\u7ecd\u5750\u6807\u7cfb\u8f6c\u6362\u76f8\u5173\u7684\u8bbe\u7f6e\u529f\u80fd\uff0c\u5305\u62ec\u8bbe\u7f6e\u6e90\u692d\u7403\u3001\u76ee\u6807\u692d\u7403\u3001\u6295\u5f71\u53c2\u6570\u3001\u57fa\u51c6 \u8f6c\u6362\u53c2\u6570\u7b49\u3002\u8fd9\u91cc\u901a\u8fc7\u6b63\u7b97\u548c\u53cd\u7b97\u7684\u793a\u4f8b\u6765\u4ecb\u7ecd\u76f8\u5173\u529f\u80fd\u7684\u7528\u6cd5\uff0c\u66f4\u591a\u7528\u6cd5\u8bfb\u8005\u53ef\u81ea\u5df1\u53c2\u8003\u540e \u9762\u7ed9\u51fa\u7684\u76f8\u5173\u63a5\u53e3\u3002</p>"},{"location":"%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2/#sdk","title":"\u5982\u4f55\u901a\u8fc7 SDK \u5b9e\u73b0\u6b63\u53cd\u7b97","text":""},{"location":"%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2/#_1","title":"\u51c6\u5907\u5de5\u4f5c","text":"<p>\u65e0\u8bba\u662f\u6b63\u7b97\u8fd8\u662f\u53cd\u7b97\uff0c\u5750\u6807\u8f6c\u6362\u90fd\u9700\u8981\u521d\u59cb\u5316\uff0c\u540c\u65f6\u9700\u8981\u8bbe\u7f6e\u76f8\u5173\u8f6c\u6362\u7684\u53c2\u6570\uff0c\u5177\u4f53\u6b65\u9aa4\u548c\u53c2\u8003\u4ee3\u7801\u5982\u4e0b: 1. \u521d\u59cb\u5316 2. \u8bbe\u7f6e\u76ee\u6807\u692d\u7403 2. \u8bbe\u7f6e\u6295\u5f71 3. \u8bbe\u7f6e\u57fa\u51c6\u8f6c\u6362\u53c2\u6570</p> <pre><code>private void init() throws RemoteException {\n    // Step 1: Initialize, must be done first\n    mCoordinate.init(); // Step 1: Initialize, must be done first\n\n    // Step 2: Set the parameters for the coordinate system\n    // Set the destination ellipsoid (e.g., Beijing 1954)\n    mCoordinate.setDstEllipse(getBeijign54Elps()); \n\n    // Step 3: Set the projection\n    // Set the projection method (e.g., UTM, Mercator)\n    mCoordinate.setProjection(getProjection()); \n\n    // Step 4: Set benchmark conversion parameters    \n    // Set the parameters for ellipsoid conversion\n    mCoordinate.setElpsConvert(new ElpsConvertData()); \n    // Set the parameters for plane conversion\n    mCoordinate.setPlaneConvert(new PlaneConvertData()); \n }\n\n // Method to get the parameters of the Beijing 1954 ellipsoid\n private ElpseData getBeijign54Elps() {\n    return new ElpseData(1, \"BeiJing54(China)\", 6378245.0, 298.3); } \n }\n\n // Method to get the projection parameters\n private ProjectionData getProjection() {\n    return new ProjectionData(40, Math.toRadians(117), 0.0, 0.0, 1.0, 500000.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0.0); }\n }\n</code></pre>"},{"location":"%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2/#_2","title":"\u6b63\u53cd\u7b97","text":"<p>\u521d\u59cb\u5316\u4e0a\u9762\u5df2\u7ecf\u4ecb\u7ecd\uff0c\u73b0\u5728\u5206\u522b\u7ed9\u51fa\u6b63\u53cd\u7b97\u76f8\u5173\u4ee3\u7801\u3002</p> <pre><code>/**\n * Method to perform forward transformation (from source BLH to local NEH)\n */\n private void trans() throws RemoteException {\n    // Initialize array for source coordinates (WGS84)\n    double[] src84 = new double[3];\n    src84[0] = Math.toRadians(31); // Latitude (B) in radians\n    src84[1] = Math.toRadians(117); // Longitude (L) in radians\n    src84[2] = 30; // Height (H)\n    // Initialize array for target coordinates (Beijing 54)\n    double[] tgt54 = new double[3]; // Initialize array for target coordinates (Beijing 54); // Initiate array for target coordinates (Beijing 54)\n    // Perform forward transformation from source BLH to local NEH\n   mCoordinate.transformSrcBlhToLocalNeh(src84, tgt54); // Perform forward transformation from source BLH to local NEH; mCoordinate.\n    // Update UI elements with transformed coordinates and error code\n    mTvN.setText(String.valueOf(tgt54[0])); // Northing (N)\n    mTvE.setText(String.valueOf(tgt54[1])); // Easting (E)\n    mTvH.setText(String.valueOf(tgt54[2])); // Height (H)\n    mTvErroeCode.setText(String.valueOf(errorcode1)); // Error code for transformation\n }\n\n\n\n/**\n * Method to perform inverse transformation (from local NEH to source BLH)\n */\n private void antiTrans() throws RemoteException {\n    // Initialize arrays for source (WGS84) and target (Beijing 54) coordinates\n    double[] src84 = new double[3]; double[] tgt54 = new double[3]; // Initialize arrays for source (WGS84) and target (Beijing 54) coordinates\n    double[] tgt54 = new double[3]; // Set initial source coordinates (WGS84) and target (Beijing 54) coordinates\n    // Set initial source coordinates (WGS84) to zero\n    src84[0] = 0; // Set initial source coordinates (WGS84) to zero.\n    src84[0] = 0; src84[1] = 0; src84[2] = 0\n    src84[1] = 0; src84[2] = 0; // Set target coordinates (Beijing 54) to zero.\n    // Set target coordinates (Beijing 54)\n    tgt54[0] = 3431025.93297; // Northing (N)\n    tgt54[1] = 499943.686606; // Easting (E)\n    tgt54[2] = 88.423175; // Height (H)\n    // Perform inverse transformation from local NEH to source BLH\n   mCoordinate.transformLocalNehToSrcBlh(tgt54, src84); // Update UI elements with transformed BLH.\n    // Update UI elements with transformed coordinates and error code\n    mTv84B.setText(String.valueOf(Math.toDegrees(src84[0]))); // Convert radians to degrees for latitude (B)\n    mTv84l.setText(String.valueOf(Math.toDegrees(src84[1]))); // Convert radians to degrees for longitude (L)\n    mTv84H.setText(String.valueOf(src84[2])); // Height (H)\n    mTvAntiErroeCode.setText(String.valueOf(errorcode2)); // Error code for transformation\n }\n</code></pre>"},{"location":"%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2/#_3","title":"\u5750\u6807\u8f6c\u6362\u63a5\u53e3","text":"<pre><code>/**\n * \n * Must initialize before coordinate transformation, then set the coordinate system.\n * @return whether the initialization is successful\n */ \n boolean init() throws RemoteException;\n\n /**\n * Sets the source ellipsoid.\n *\n * @param elpse the source ellipsoid.\n * @return whether the setting is successful\n */ \n boolean setSrcEllipse(ElpseData var1) throws RemoteException.\n\n /**\n * Sets the destination ellipsoid.\n *\n * @param elpse the destination ellipsoid.\n * @return whether the setting is successful\n */ \n boolean setDstEllipse(ElpseData var1) throws RemoteException.\n\n /* Sets the projection parameters.\n * \n * @param projection the projection parameters\n * @return whether the setting is successful\n */ \n boolean setProjection(ProjectionData var1) throws RemoteException;\n\n /* Sets the datum transformation parameters.\n *\n * @param elps the datum transformation parameters.\n * @return whether the setting is successful\n */ \n boolean setElpsConvert(ElpsConvertData var1) throws RemoteException;\n\n /**\n * After initializing the coordinate system parameters, compute the local coordinates using WGS84 coordinates.\n * \n * @param wgs84blh WGS84 coordinates (longitude, latitude, altitude), units in radians, cannot be null\n * @param localNeh Local ellipsoid coordinates (North, East, Height), cannot be null\n * @return error code, see section 10.4.2 for coordinate transformation error code index\n */\n int transformSrcBlhToLocalNeh(double[] var1, double[] var2) throws RemoteException;\n\n /**\n * After initializing the coordinate system parameters, compute the WGS84 coordinates using local coordinates.\n * \n * @param localNeh Local ellipsoid coordinates (North, East, Height), cannot be null\n * @param wgs84blh WGS84 coordinates (longitude, latitude, altitude), units in radians, cannot be null\n * @return error code, see section 10.4.2 for coordinate transformation error code index\n */\n int transformLocalNehToSrcBlh(double[] var1, double[] var2) throws RemoteException;\n\n /**\n * Sets the horizontal adjustment parameters.\n * \n * @param planeData the horizontal adjustment parameters.\n * @return whether the setting is successful\n */ \n boolean setPlaneConvert(PlaneConvertData var1) throws RemoteException;\n\n /**\n * Sets the height fitting parameters.\n *\n * @param hFitting the height fitting parameters.\n * @return whether the setting is successful\n */ \n public boolean setHeightFitting(HeightFittingData hFitting) throws RemoteException;\n\n /**\n * Sets the geoid model parameters.\n * \n * @param geoidParas the geoid model parameters.\n * @return whether the setting is successful\n */ \n public boolean setHeightFittingConvert(GeoidParamsData geoidParas) throws RemoteException;\n\n /**\n * Curve surface fitting (8 parameters).\n * \n * @param srcxy the source coordinate array\n * @param dsth the target point height array\n */\n public VerticalAdjResult calCurveSurfaceVerticalAdjParamsEightParams(double[] srcxy, double[] dsth);\n\n /**\n * TGO adjustment.\n *\n * @param srcxy the source coordinate array\n * @param dsth the target point height array\n */\n public VerticalAdjResult calTgoVerticalAdjParams(double[] srcxy, double[] dsth);\n\n /**\n * Fixed difference adjustment.\n *\n * @param dsth the target point height array\n */\n public VerticalAdjResult calFixedVerticalAdjParams(double[] dsth);\n\n /**\n * Horizontal adjustment.\n * \n * @param srcxy the source coordinate array\n * @param dstxy the target coordinate array\n */\n public HorizAdjResult calTgoHorizAdjParams(double[] srcxy, double[] dstxy);\n</code></pre>"},{"location":"%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/","title":"\u5e38\u7528\u6570\u636e\u7c7b\u578b","text":""},{"location":"%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#satelliteposition","title":"SatellitePosition","text":"\u7c7b\u578b \u540d\u79f0 \u63cf\u8ff0 Position mPosition \u5305\u542b\u4f4d\u7f6e\u4fe1\u606f x\u3001y\u3001z\uff08double \u7c7b\u578b\u5f27\u5ea6\uff0c\u5bf9\u5e94 BLH\uff09 EnumSolveStatus mEnumSolveStatus \u5305\u542b\u89e3\u72b6\u6001\u4fe1\u606f"},{"location":"%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#enumsolvestatus","title":"EnumSolveStatus","text":"\u540d\u79f0 \u63cf\u8ff0 SOLVE_STATUS_FIX \u56fa\u5b9a SOLVE_STATUS_FLOAT \u6d6e\u52a8 SOLVE_STATUS_WIDE \u6d6e\u52a8 SOLVE_STATUS_COS \u6d6e\u52a8 SOLVE_STATUS_RTD \u6d6e\u52a8 SOLVE_STATUS_DIFF \u6d6e\u52a8 SOLVE_STATUS_NONE \u672a\u77e5 SOLVE_STATUS_BASE_WRONG \u672a\u77e5 SOLVE_STATUS_SEARCH_SAT \u672a\u77e5 SOLVE_STATUS_STAR_TIMEOUT \u5f02\u5e38 SOLVE_STATUS_STAR_OUTAREA \u5f02\u5e38 SOLVE_STATUS_STAR_SERVER_ERR \u5f02\u5e38 <p>\u9664\u4e0a\u8868\u6240\u8ff0\u5916\uff0c\u5176\u4f59\u6240\u6709\u72b6\u6001\uff0c\u60a8\u53ef\u4ee5\u5b9a\u4e49\u4e3a\u5355\u70b9\u3002</p>"},{"location":"%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#satelliteprecision","title":"SatellitePrecision","text":"\u7c7b\u578b \u540d\u79f0 \u63cf\u8ff0 double mHpre \u6c34\u5e73\u65b9\u5411\u7cbe\u5ea6 double mVpre \u5782\u76f4\u65b9\u5411\u7cbe\u5ea6 double mXpre \u5927\u5730\u7eac\u5ea6\u7cbe\u5ea6 double mYpre \u5927\u5730\u7cbe\u8bfb\u7cbe\u5ea6 double mRms \u7a7a\u95f4\u7cbe\u5ea6"},{"location":"%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#ntripprotocolcode","title":"NtripProtocolCode","text":"\u7c7b\u578b \u540d\u79f0 \u63cf\u8ff0 NtripProtocolCode NC_ICY_200_OK \u767b\u5f55\u6210\u529f NtripProtocolCode ERROR_401_UNAUTHORIZED \u767b\u5f55\u5931\u8d25"},{"location":"%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#empdaworkmodestatus","title":"EmPdaWorkModeStatus","text":"\u7c7b\u578b \u540d\u79f0 \u63cf\u8ff0 EmPdaWorkModeStatus LOGINING \u6b63\u5728\u767b\u5f55 EmPdaWorkModeStatus LOGOUT \u6ce8\u9500 EmPdaWorkModeStatus LOGINED \u5df2\u767b\u9646/\u767b\u5f55\u6210\u529f"},{"location":"%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#nonemagnetictiltinfo","title":"NoneMagneticTiltInfo","text":"\u7c7b\u578b \u540d\u79f0 \u63cf\u8ff0 double mVarE \u8865\u507f\u70b9\u7ecf\u5ea6\u6807\u51c6\u5dee double mVarN \u8865\u507f\u70b9\u7eac\u5ea6\u6807\u51c6\u5dee double mVarU \u8865\u507f\u70b9\u9ad8\u7a0b\u6807\u51c6\u5dee double mVarTilt \u7ad6\u76f4\u503e\u89d2\u6807\u51c6\u5dee double mVarDirect \u503e\u659c\u65b9\u5411\u89d2\u6807\u51c6\u5dee double mLatitude \u8865\u507f\u70b9\u7eac\u5ea6 double mLontitude \u8865\u507f\u70b9\u7ecf\u5ea6 double mHeight \u8865\u507f\u70b9\u9ad8\u7a0b double mHeightOffset \u9ad8\u7a0b\u504f\u79fb double mDiffAge \u5dee\u5206\u9f84\u671f double mPitch \u4fef\u4ef0\u89d2 double mRoll \u6a2a\u6eda\u89d2 double mHeading \u822a\u5411\u89d2"},{"location":"%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#coorkernal","title":"CoorKernal","text":"\u7c7b\u578b \u540d\u79f0 \u63cf\u8ff0 Position rawBlh \u63a5\u6536\u673a\u539f\u59cb\u8f93\u51fa Position wgsBlh \u7ecf\u7eac\u5ea6 Position wgsXyz \u7a7a\u95f4\u5750\u6807 Position localBlh \u672c\u5730\u7ecf\u7eac\u5ea6 Position localXyz \u672c\u5730XYZ Position localNeh \u672c\u5730\u5e73\u9762\u5750\u6807"},{"location":"%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#surveypointpositioninfo","title":"SurveyPointPositionInfo","text":"\u7c7b\u578b \u540d\u79f0 \u63cf\u8ff0 CoorKernal mCoorKernal \u70b9\u5750\u6807\u96c6\u5408 GpsTime mGpsTime \u536b\u661f\u65f6 Time mTime \u65f6\u95f4 SatellitePrecision mSatellitePrecision \u7cbe\u5ea6\u4fe1\u606f double diffAge \u5dee\u5206\u9f84\u671f"},{"location":"%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#rtkcamera","title":"RTKCamera","text":"\u7c7b\u578b \u540d\u79f0 \u63cf\u8ff0 CoorKernal mCoorKernal \u70b9\u5750\u6807\u96c6\u5408 GpsTime mGpsTime \u536b\u661f\u65f6 Time mTime \u65f6\u95f4 SatellitePrecision mSatellitePrecision \u7cbe\u5ea6\u4fe1\u606f double diffAge \u5dee\u5206\u9f84\u671f"},{"location":"%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#basewarning","title":"BaseWarning","text":"\u7c7b\u578b \u540d\u79f0 \u63cf\u8ff0 EnumBaseWarning mEnumBaseWarning \u504f\u79fb\u72b6\u6001"},{"location":"%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/#enumbasewarning","title":"EnumBaseWarning","text":"\u7c7b\u578b \u540d\u79f0 \u63cf\u8ff0 BASE_WARNING_NONE BASE_WARNING_NONE \u672a\u504f\u79fb BASE_WARNING_BASE_MOVE BASE_WARNING_BASE_MOVE \u4f4d\u7f6e\u53d1\u751f\u504f\u79fb"},{"location":"%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/","title":"\u5feb\u901f\u5f00\u59cb","text":"<p>\u672c\u8282\u65e8\u5728\u5e2e\u52a9\u60a8\u5feb\u901f\u4e0a\u624b\u4f7f\u7528SDK\uff0c\u91cd\u70b9\u4ecb\u7ecd\u5982\u4f55\u901a\u8fc7\u84dd\u7259\u8fde\u63a5\u63a5\u6536\u673a\u5e76\u83b7\u53d6\u5750\u6807\u4fe1\u606f\u3002\u5728\u5f00\u59cb\u4e4b\u524d\uff0c\u60a8\u9700\u8981\u5148\u6b63\u786e\u5f15\u5165\u534e\u6d4bGnssServerSDK\uff08gnssserver.aar\u3001gnsstoollib.aar\u3001sdk4a.aar\uff09\u7684\u4e09\u4e2aaar\u6587\u4ef6\uff0c\u53ef\u4ee5\u5c06\u5176\u653e\u5165lib\u76ee\u5f55\uff0c\u5728gradle\u4e2d\u5c06\u5176\u5f15\u5165\u3002</p>"},{"location":"%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/#_1","title":"\u6743\u9650","text":"<p>\u5728\u4f7f\u7528SDK\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u5e94\u7528\u5177\u6709\u5fc5\u8981\u7684\u6743\u9650\u3002\u8fd9\u4e9b\u6743\u9650\u5305\u62ec\u84dd\u7259\uff08\u672c\u8282\u4e2d\u4ec5\u4f7f\u7528\u84dd\u7259\u8fde\u63a5\uff0c\u4e0d\u6d89\u53caWIFI\uff09\u3001\u8bfb\u53d6\u548c\u5199\u5165\u5916\u90e8\u5b58\u50a8\u7684\u6743\u9650\uff0c\u56e0\u4e3aSDK\u9700\u8981\u5916\u90e8\u5b58\u50a8\u6765\u8bfb\u5199\u914d\u7f6e\u6587\u4ef6\u548c\u65e5\u5fd7\u6587\u4ef6\u3002\u8bf7\u5728<code>AndroidManifest.xml</code>\u4e2d\u6dfb\u52a0\u6743\u9650\u3002</p> <pre><code>&lt;!-- Permission to use Bluetooth features --&gt;\n&lt;uses-permission android:name=\"android.permission.BLUETOOTH\"/&gt;\n&lt;!-- Permission to administer Bluetooth settings --&gt;\n&lt;uses-permission android:name=\"android.permission.BLUETOOTH_ADMIN\"/&gt;\n&lt;!-- Permission to read from external storage --&gt;\n&lt;uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/&gt;\n&lt;!-- Permission to write to external storage --&gt;\n&lt;uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/&gt;\n</code></pre> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\u5728Android10\u3001Android11\u53ca\u66f4\u9ad8\u7248\u672c\u4e2d\uff0c\u5916\u90e8\u5b58\u50a8\u7684\u6743\u9650\u7533\u8bf7\u65b9\u5f0f\u4f1a\u6709\u4e9b\u8bb8\u5dee\u5f02\u3002Android 10\u5f15\u5165\u4e86Scoped Storage\uff08\u5206\u533a\u5b58\u50a8\uff09\uff0c\u53ef\u4ee5\u5728 AndroidManifest.xml \u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801\uff1a</p> <pre><code>&lt;application\n    android:requestLegacyExternalStorage=\"true\"\n    ... &gt;\n</code></pre> <p>requestLegacyExternalStorage \u6807\u8bb0\u5728Android 11\u4e2d\u88ab\u5b8c\u5168\u5e9f\u5f03\uff0c\u6240\u6709\u5e94\u7528\u90fd\u5fc5\u987b\u9075\u5faaScoped Storage\u6a21\u578b\uff0c\u540c\u65f6\u5f15\u5165\u4e86\u4e00\u4e2a\u65b0\u7684\u7279\u6b8a\u6743\u9650\uff0c\u53ef\u4ee5\u8ba9\u5e94\u7528\u83b7\u5f97\u7c7b\u4f3c\u4e8e\u4f20\u7edf\u5168\u5c40\u6587\u4ef6\u8bbf\u95ee\u7684\u6743\u9650\uff0c\u5177\u4f53\u58f0\u660e\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>&lt;uses-permission android:name=\"android.permission.MANAGE_EXTERNAL_STORAGE\"/&gt;\n</code></pre> <p>\u540c\u65f6\uff0c\u5728\u4ee3\u7801\u4e2d\u9700\u8981\u5f15\u5bfc\u7528\u6237\u5230\u7cfb\u7edf\u8bbe\u7f6e\u4e2d\u624b\u52a8\u6388\u4e88\u6743\u9650\uff1a</p> <pre><code>Intent intent = new Intent(Settings.ACTION_MANAGE_ALL_FILES_ACCESS_PERMISSION);\nstartActivity(intent);\n</code></pre> <p>\u5176\u4e2dApp.getInstance().getApplicationContext()\u4e3a\u5e94\u7528\u7ea7\u522b\u7684Context\uff0cSdcardUtils.getAppFolder()\u53ef\u4ee5\u662f\u4efb\u4f55\u6709\u8bfb\u5199\u6743\u9650\u7684\u8def\u5f84\u3002mService.requestReceiverListener(mReceiverListener)\u4e3b\u8981\u7528\u4e8e\u8bbe\u7f6e\u6570\u636e\u7684\u56de\u8c03\uff0c\u5982\u5750\u6807\u6570\u636e\u7b49\u3002</p>"},{"location":"%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/#sdk","title":"\u521d\u59cb\u5316SDK","text":"<p>\u5728\u83b7\u5f97\u6743\u9650\u540e\uff0c\u521d\u59cb\u5316GNSS\u670d\u52a1\u5e76\u5f00\u59cb\u76d1\u542c\u8fde\u63a5\u72b6\u6001\u3002\u4ee5\u4e0b\u662f\u521d\u59cb\u5316\u6b65\u9aa4\uff1a</p> <pre><code>new Thread(new Runnable() {\n \u00a0 \u00a0@Override\n \u00a0 \u00a0public void run() {\n \u00a0 \u00a0 \u00a0 \u00a0try {\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// Initialize the Service using ApplicationContext and resource file path parameter\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0GnssServiceHelper.getInstance().start(App.getInstance().getApplicationContext(), SdcardUtils.getAppFolder());\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// Get the Service instance\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0mService = GnssServiceHelper.getInstance().getGnssService();\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// Receiver data callback\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0mService.requestReceiverListener(mReceiverListener);\n \u00a0 \u00a0 \u00a0  } catch (Exception e) {\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0e.printStackTrace();\n \u00a0 \u00a0 \u00a0  }\n \u00a0  }\n}).start();\n</code></pre> <p>\u5176\u4e2dApp.getInstance().getApplicationContext()\u4e3a\u5e94\u7528\u7ea7\u522b\u7684Context\uff0cSdcardUtils.getAppFolder()\u53ef\u4ee5\u662f\u4efb\u4f55\u6709\u8bfb\u5199\u6743\u9650\u7684\u8def\u5f84\u3002mService.requestReceiverListener(mReceiverListener)\u4e3b\u8981\u7528\u4e8e\u8bbe\u7f6e\u6570\u636e\u7684\u56de\u8c03\uff0c\u5982\u5750\u6807\u6570\u636e\u7b49\u3002</p>"},{"location":"%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/#_2","title":"\u8fde\u63a5\u8bbe\u5907","text":"<p>SDK\u4e3a\u60a8\u63d0\u4f9b\u4e24\u79cd\u8fde\u63a5\u8bbe\u5907\u7684\u65b9\u5f0f\uff0c\u5206\u522b\u4e3a\u84dd\u7259\u8fde\u63a5\u548cWIFI\u8fde\u63a5\uff0c\u5176\u4e2d\u84dd\u7259\u8fde\u63a5\u7684\u65b9\u5f0f\u4e3a\u60a8\u63d0\u4f9b\u4e86\u4e24\u79cd\uff1a\u901a\u8fc7SDK\u63d0\u4f9b\u7684\u63a5\u53e3\u8fde\u63a5\uff0c\u4ee5\u53ca\u901a\u8fc7\u6ce8\u5165\u65b9\u5f0f\u5b9e\u73b0\u84dd\u7259\u8fde\u63a5\u548c\u65ad\u5f00\uff0c\u8fd9\u91cc\u4e3a\u4fbf\u4e8e\u60a8\u5feb\u901f\u4e0a\u624b\uff0c\u4ec5\u4ecb\u7ecd\u901a\u8fc7SDK\u76f4\u63a5\u5b9e\u73b0\u84dd\u7259\u8fde\u63a5\u7684\u65b9\u5f0f\uff0c\u8fde\u63a5\u4e3b\u8981\u6b65\u9aa4\u548c\u4ee3\u7801\u5982\u4e0b\uff1a</p> <ul> <li>\u901a\u8fc7 ReceiverConnectionOption \u914d\u7f6e\u8fde\u63a5\u53c2\u6570\uff1b</li> <li>\u901a\u8fc7\u521d\u59cb\u5316\u4e2d\u5f97\u5230\u7684 service \u6765\u83b7\u53d6 IReceiverConnectManager \u5bf9\u8c61</li> <li>\u5c06\u201c1\u201d\u4e2d\u5f97\u5230\u7684 ReceiverConnectionOption \u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165IReceiverConnectManager \u5bf9\u8c61\u7684 connect \u65b9\u6cd5\u4e2d</li> </ul> <pre><code>// Connection event\nmBTConnect.setOnClickListener(new View.OnClickListener() {\n \u00a0 \u00a0@Override\n \u00a0 \u00a0public void onClick(View view) {\n \u00a0 \u00a0 \u00a0 \u00a0// Connect directly through the SDK\n \u00a0 \u00a0 \u00a0 \u00a0ReceiverConnectionOption option = new ReceiverConnectionOption()\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  .setConnectionType(ConnectionType.CONNECTION_BLUETOOTH)\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  .setProductName(\"SMART-RTK\")\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  .setBluetoothName(\"GNSS-9999848\");\n \u00a0 \u00a0 \u00a0 \n \u00a0 \u00a0 \u00a0 \u00a0try {\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// Get receiverConnectManager through mService and then connect using receiverConnectManager\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0IReceiverConnectManager receiverConnectManager = IReceiverConnectManager\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  .Stub.asInterface(mService.getReceiverConnectManager());\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// Connect using receiverConnectManager\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0if (!receiverConnectManager.connect(option)) {\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// Connection failure\n \u00a0          }\n \u00a0 \u00a0 \u00a0  } catch (RemoteException e) {\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0throw new RuntimeException(e);\n \u00a0 \u00a0 \u00a0  }\n \u00a0  }\n});\n</code></pre>"},{"location":"%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/#_3","title":"\u65ad\u5f00\u8bbe\u5907","text":"<p>\u901a\u8fc7\u521d\u59cb\u5316SDK\u4e2d\u5f97\u5230\u7684 service \u6765\u83b7\u53d6 IReceiverConnectManager \u5bf9\u8c61\uff0c\u7136\u540e\u901a\u8fc7\u8c03\u7528IReceiverConnectManager \u5bf9\u8c61\u7684 disconnect \u65b9\u6cd5\u5373\u53ef\u65ad\u5f00\u8bbe\u5907\u3002\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>// Disconnection event\nmBTDisConnect.setOnClickListener(new View.OnClickListener() {\n \u00a0 \u00a0@Override\n \u00a0 \u00a0public void onClick(View view) {\n \u00a0 \u00a0 \u00a0 \u00a0try {\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0IReceiverConnectManager receiverConnectManager = IReceiverConnectManager\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  .Stub.asInterface(mService.getReceiverConnectManager());\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0if (receiverConnectManager != null) {\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0receiverConnectManager.disConnect();\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  }\n \u00a0 \u00a0 \u00a0  } catch (RemoteException e) {\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0throw new RuntimeException(e);\n \u00a0 \u00a0 \u00a0  }\n \u00a0  }\n});\n</code></pre>"},{"location":"%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/#_4","title":"\u83b7\u53d6\u4f4d\u7f6e\u6570\u636e","text":"<pre><code>// Monitor location data\nPositionSource.getInstance().addListener(new IPositionListener.Stub() {\n    @Override\n    public void onCoordinatePosition(SurveyPointPositionInfo positionInfo) {\n        runOnUiThread(new Runnable() {\n            @Override\n            public void run() {\n                updatePositionInfoUi(positionInfo);\n            }\n        });\n    }\n});\n\n\n// Render the coordinate information to the page\nprivate void updatePositionInfoUi(@NonNull SurveyPointPositionInfo surveyPointPositionInfo) {\n    Position position = surveyPointPositionInfo.getCoorKernal().getWgsBlh();\n    mPoint3DMutable = new Point3DMutable(\n            position.getX(),\n            position.getY(),\n            position.getZ()\n    );\n    tvB.setText(String.valueOf(position.getX()));\n    tvL.setText(String.valueOf(position.getY()));\n    tvH.setText(String.valueOf(position.getZ()));\n    tvPositionState.setText(String.valueOf(surveyPointPositionInfo.getSolveStatus().getValue()));\n}\n</code></pre>"},{"location":"%E6%8E%A5%E6%94%B6%E6%9C%BA%E9%80%9A%E4%BF%A1/","title":"\u63a5\u6536\u673a\u901a\u4fe1","text":""},{"location":"%E6%8E%A5%E6%94%B6%E6%9C%BA%E9%80%9A%E4%BF%A1/#_1","title":"\u4ece\u63a5\u6536\u673a\u83b7\u53d6\u6570\u636e","text":"<p>\u60a8\u62ff\u5230 service \u540e\uff0c\u53ef\u4ee5\u901a\u8fc7 service \u7684 requestReceiverListener \u65b9\u6cd5\u6765\u5b9e\u73b0\u5bf9\u63a5\u6536\u673a\u6570\u636e\u7684\u76d1\u542c\uff0crequestReceiverListener \u8981\u6c42\u60a8\u4f20\u5165 IReceiverListener.Stub \u5bf9 \u8c61\uff0c\u60a8\u53ef\u4ee5\u7ee7\u627f\u8be5\u5bf9\u8c61\uff0c\u5b9e\u73b0\u76f8\u5173\u63a5\u53e3\uff0c\u901a\u8fc7\u5bf9\u63a5\u53e3\u7684\u5b9e\u73b0\u6765\u83b7\u5f97\u9700\u8981\u7684\u6570\u636e\u3002\u5176\u4e2d\u6709\u7684\u56de\u8c03 \u63a5\u53e3\u662f\u4f1a\u6309\u4e00\u5b9a\u7684\u9891\u7387\u56de\u8c03(\u6bd4\u5982\u4f4d\u7f6e\u4fe1\u606f\u548c\u536b\u661f\u4fe1\u606f)\uff0c\u6709\u7684\u63a5\u53e3\u662f\u9700\u8981\u7ed9\u63a5\u6536\u673a\u53d1\u547d\u4ee4\u624d\u4f1a\u56de\u8c03\u3002</p>"},{"location":"%E6%8E%A5%E6%94%B6%E6%9C%BA%E9%80%9A%E4%BF%A1/#_2","title":"\u53d1\u9001\u6570\u636e\u7ed9\u63a5\u6536\u673a(\u8bbe\u7f6e\u63a5\u6536\u673a)","text":"<p>\u60a8\u53ef\u4ee5\u901a\u8fc7 ReceiverCmdManager \u7c7b\u6765\u7ed9\u63a5\u6536\u673a\u53d1\u9001\u547d\u4ee4\uff0c\u8fd9\u4e2a\u7c7b\u662f\u4e2a\u5355\u4f8b\uff0c\u76f4\u63a5\u8c03\u7528\u5373\u53ef\uff0c\u6bcf\u4e2a\u63a5\u53e3\u7684\u542b\u4e49\u89c1\u63a5\u53e3\u6ce8\u91ca\u3002</p> <pre><code>/***\n * Send differential data\n *\n * @param bts Differential data\n */\npublic void setCmdSendDiffDataToOem(Context context, byte[] bts) {}\n\n/***\n * Disable all IOs except for the radio, built-in network, and handheld network\n *\n * @param currentIos IO\n */\npublic void setCmdDisableOtherIos(Context context, int currentIos) {}\n\n/***\n * Update the radio power switch\n */\npublic void setCmdUpdateRadioPowerOn(Context context, boolean powerOn) {}\n\n/***\n * Update whether the radio auto powers on\n */\npublic void setCmdUpdateRadioAutoPower(Context context, boolean autoPowerOn) {}\n\n/***\n * Set the receiver's radio power\n */\npublic void setCmdUpdateRadioPower(Context context, double power) {}\n\n/***\n * Set the receiver's radio air baud rate\n */\npublic void setCmdUpdateRadioAirBaudrate(Context context, int baudrate) {}\n\n/***\n * Set the receiver's radio frequency\n */\npublic void setCmdUpdateRadioFrequency(Context context, double frequency) {}\n\n/***\n * Set the receiver's radio protocol\n */\npublic void setCmdUpdateRadioProtocol(Context context, EnumRadioProtocol protocol) {}\n\n/***\n * Set the receiver's radio stepper value\n */\npublic void setCmdUpdateRadioStepper(Context context, double stepper) {}\n\n/***\n * Set the radio sensitivity\n */\npublic void setCmdUpdateRadioSensitivity(Context context, EnumSensitivity sensitivity) {}\n\n/***\n * Enable or disable FEC\n */\npublic void setCmdUpdateRadioFec(Context context, boolean enable) {}\n\n/***\n * Set the call sign\n */\npublic void setCmdUpdateRadioCallSign(Context context, DataRadioCallsign callSign) {}\n\n/***\n * Set the receiver's GPRS module information\n */\npublic void setCmdUpdateGprsInfo(Context context, GprsInfo info) {}\n\n/***\n * Set the receiver's CORS information\n */\npublic void setCmdUpdateCorsInfo(Context context, CorsInfo info) {}\n\n/***\n * Log in to the receiver's GPRS module\n */\npublic void setCmdLoginGprs(Context context) {}\n\n/***\n * Set the 3G module state to GSM or GPRS\n */\npublic void setCmdUpdateModemCommunicationMode(Context context, EnumModemCommunicationMode mode) {}\n\n/***\n * Set the 3G module GSM dial parameters\n */\npublic void setCmdUpdateCsdInfo(Context context, CsdInfo info) {}\n\n/***\n * Dial or disconnect the 3G module\n */\npublic void setCmdDialModem(Context context, boolean isDial) {}\n\n/***\n * Turn the 3G module on or off\n */\npublic void setCmdPowerModem(Context context, boolean powerOn) {}\n\n/***\n * Set the 3G module dial parameters\n */\npublic void setCmdUpdateModemDialParams(Context context, ModemDialParams params) {}\n\n/***\n * Set the receiver position information output\n */\npublic void setCmdOutputPosData(Context context, EnumDataFrequency rtkFrequency) {}\n\n/***\n * Set the receiver rover parameters\n */\npublic void setCmdStartRover(Context context, RoverParams roverParams) {}\n\n/***\n * Set the receiver base station parameters\n */\npublic void setCmdStartBase(Context context, BaseParams params) {}\n\n/***\n * Start or stop file recording\n */\npublic void setCmdStartFileRecord(Context context, boolean isOpenStaticSet) {}\n\n/***\n * Update file auto-recording settings\n */\npublic void setCmdUpdateFileRecordAutoStart(Context context, boolean isAutoStart) {}\n\n/***\n * Update file recording parameters\n */\npublic void setCmdUpdateFileRecordParams(Context context, FileRecordInfo info) {}\n\n/***\n * Query the receiver IO corresponding output data\n */\npublic void setCmdQueryIoData(Context context, EnumGnssIoId ioId) {}\n\n/***\n * Query the RTK position output frequency interface\n */\npublic void setCmdQueryPosDataFrequency(Context context) {}\n\n/***\n * Get the receiver information\n */\npublic void setCmdQueryReceiverInfo(Context context) {}\n\n/***\n * Get the receiver base station parameters\n */\npublic void setCmdQueryBaseParams(Context context) {}\n\n/***\n * Query file recording status\n */\npublic void setCmdQueryFileRecordStatus(Context context) {}\n\n/***\n * Get the receiver's radio module power status\n */\npublic void setCmdQueryRadioPowerStatus(Context context) {}\n\n/***\n * Get the 3G module state, GSM or GPRS\n */\npublic void setCmdQueryModemCommunicationMode(Context context) {}\n\n/***\n * Get the working status of the receiver's radio, network, and serial ports\n */\npublic void setCmdQueryIoEnable(Context context) {}\n\n/***\n * Get the receiver registration code\n */\npublic void setCmdQueryRegCode(Context context) {}\n\n/***\n * Get the 3G module GSM dial status\n */\npublic void setCmdQueryCsdDialStatus(Context context) {}\n\n/***\n * Get the receiver's GPRS module status\n */\npublic void setCmdQueryGprsStatus(Context context) {}\n\n/***\n * Get the receiver's GPRS module signal strength\n */\npublic void setCmdQueryModemSignal(Context context) {}\n\n/***\n * Get whether the 3G module auto dials\n */\npublic void setCmdQueryModemAutoDial(Context context) {}\n\n/***\n * Get whether the 3G module auto powers on\n */\npublic void setCmdQueryModemAutoPowerOn(Context context) {}\n\n/***\n * Set whether the 3G module auto powers on\n */\npublic void setCmdUpdateModemAutoPowerOn(Context context, boolean autoPower) {}\n\n/***\n * Set whether the 3G module auto dials\n */\npublic void setCmdUpdateModemAutoDial(Context context, boolean autoDial) {}\n\n/***\n * Get the 3G module dial status\n */\npublic void setCmdQueryModemDialStatus(Context context) {}\n\n/***\n * Get the 3G module power status\n */\npublic void setCmdQueryModemPowerStatus(Context context) {}\n\n/***\n * Get the 3G module frequency band\n */\npublic void setCmdQueryModemBandMode(Context context) {}\n\n/***\n * Set the 3G module frequency band\n */\npublic void setCmdUpdateModemBandMode(Context context, EnumModemBandMode modemBandMode) {}\n\n/***\n * Get the 3G module GSM information\n */\npublic void setCmdQueryCsdInfo(Context context) {}\n\n/***\n * Query file recording parameters\n */\npublic void setCmdQueryFileRecordParams(Context context) {}\n\n/***\n * Get whether the file auto records\n */\npublic void setCmdQueryFileRecordAutoStart(Context context) {}\n\n/***\n * Get the receiver's radio information\n */\npublic void setCmdQueryRadioInfo(Context context) {}\n\n/***\n * Get the receiver's radio channel list\n */\npublic void setCmdQueryRadioChannelList(Context context) {}\n\n/***\n * Get the 3G module dial parameters\n */\npublic void setCmdQueryModemDialParams(Context context) {}\n\n/***\n * Get the receiver's CORS settings information\n */\npublic void setCmdQueryCorsInfo(Context context) {}\n\n/***\n * Get whether the receiver's radio auto powers on\n */\npublic void setCmdQueryRadioAutoPower(Context context) {}\n\n/***\n * Get whether the WIFI module auto powers on\n */\npublic void setCmdQueryWifiAutoPowerOn(Context context) {}\n\n/***\n * Get the WIFI module parameters\n */\npublic void setCmdQueryWifiParams(Context context) {}\n\n/***\n * Get the WIFI status\n */\npublic void setCmdQueryWifiStatus(Context context) {}\n\n/***\n * Set whether the WIFI module auto powers on\n */\npublic void setCmdUpdateWifiAutoPowerOn(Context context, boolean isAutoOpen) {}\n\n/***\n * Update the WIFI module parameters\n */\npublic void setCmdUpdateWifiParams(Context context, ReceiverWifiInfo info) {}\n\n/***\n * Turn the WIFI module on or off\n */\npublic void setCmdUpdateWifiPowerOn(Context context, boolean isOpenWifi) {}\n\n/***\n * Get the receiver's GPRS module information\n */\npublic void setCmdQueryGprsInfo(Context context) {}\n\n/***\n * Disconnect the receiver's GPRS module\n */\npublic void setCmdBreakGprs(Context context) {}\n\n/***\n * Reset the receiver\n */\npublic void setCmdResetReceiver(Context context) {}\n\n/***\n * Reset the receiver, clearing only the ephemeris without clearing the configuration\n */\npublic void setCmdEphremisReset(Context context) {}\n\n/***\n * Register the receiver\n */\npublic void setCmdRegReceiver(Context context, RegisterCode code) {}\n\n/***\n * Set the receiver's serial port baud rate\n */\npublic void setCmdUpdateComBaudrate(Context context, EnumBaudrate baudrate) {}\n\n/***\n * Output NMEA data from the receiver\n */\npublic void setCmdOutputNmea(Context context, NmeaSetParam param) {}\n\n/***\n * Get the current NMEA output list of the specified IO of the receiver\n */\npublic void setCmdQueryNmeaOutputList(Context context, EnumGnssIoId ioId) {}\n\n/***\n * Stop outputting information on a specific IO port of the receiver\n */\npublic void setCmdSetGnssDataUnLogall(Context context, EnumGnssIoId ioId) {}\n\n/***\n * Get the receiver's serial port baud rate\n */\npublic void setCmdQueryComBaudrate(Context context) {}\n\n/***\n * Get the source list\n */\npublic void setCmdQuerySourceTable(Context context) {}\n\n/***\n * Get the receiver battery life\n */\npublic void setCmdQueryBatteryLife(Context context) {}\n\n/***\n * Power off the receiver\n */\npublic void setCmdPowerOffReceiver(Context context) {}\n\n/***\n * Get the receiver's elevation mask angle\n */\npublic void setCmdQueryGnssElevMask(Context context) {}\n\n/***\n * Get the receiver's PDOP limit value\n */\npublic void setCmdQueryGnssPDopMask(Context context) {}\n\n/***\n * Get the advanced base station information list\n */\npublic void setCmdQueryBasePositionList(Context context) {}\n\n/***\n * Clear receiver advanced reference station information\n */\npublic void setCmdClearBasePostionList(Context context) {}\n\n/***\n * Set receiver advanced reference station information\n */\npublic void setCmdAddPostionToBaseList(Context context, BasePositionInfo info) {}\n\n/***\n * Delete a piece of receiver advanced reference station information\n */\npublic void setCmdRemovePostionFromBaseList(Context context, int index) {}\n\n/***\n * Set the receiver advanced reference station translation amount\n */\npublic void setCmdUpdateBasePositionDifference(Context context, float diff) {}\n\n/***\n * Obtain receiver advanced reference station translation\n */\npublic void setCmdQueryBasePositionDifference(Context context) {}\n\n/***\n * Get whether the receiver's GPRS module automatically logs in\n */\npublic void setCmdQueryGprsLoginMdl(Context context) {}\n\n/***\n * Set whether the receiver's GPRS module automatically logs in\n */\npublic void setCmdUpdateGprsLoginMdl(Context context, boolean autoLogin) {}\n\n/***\n * Set the tilt sensor data to be output at a fixed frequency\n */\npublic void setCmdOutputEBubbleData(Context context, EnumDataFrequency frequency) {}\n\n/***\n * Set gyroscope data to be output at a fixed frequency\n */\npublic void setCmdOutputMagneticData(Context context, EnumDataFrequency frequency) {}\n\n/***\n * Sensor calibration\n */\npublic void setCmdEbubbleCalibration(Context context, EbubbleCalibration calibration) {}\n\n/***\n * Download files msgdata PpkStartInfo\n */\npublic void setCmdStartPpk(Context context, PpkStartInfo ppkStartInfo) {}\n\n/***\n * Download files msgdata PPKStopInfo\n */\npublic void setCmdStopPPK(Context context, PpkStopInfo ppkStopInfo) {}\n\n/***\n * Data routing\n */\npublic void setCmdDataRouting(Context context, DataRoutingInfo info) {}\n</code></pre>"},{"location":"%E6%8E%A5%E6%94%B6%E6%9C%BA%E9%80%9A%E4%BF%A1/#_3","title":"\u536b\u661f\u6570\u636e\u83b7\u53d6","text":""},{"location":"%E6%8E%A5%E6%94%B6%E6%9C%BA%E9%80%9A%E4%BF%A1/#_4","title":"\u83b7\u53d6\u536b\u661f\u6570\u91cf","text":"<p>\u672c\u90e8\u5206\u9488\u5bf9\u7528\u6237\u53cd\u9988\u7684\u5e38\u89c1\u95ee\u9898\u8fdb\u884c\u4e86\u8865\u5145\u8bf4\u660e\uff0c\u4ee5\u4fbf\u8bfb\u8005\u53c2\u8003\u5e76\u5b9e\u73b0\u6240\u9700\u529f\u80fd\u3002\u53ea\u9700\u5b9e\u73b0 <code>getSatelliteUsedNums</code> \u65b9\u6cd5\uff0c\u4ee3\u7801\u793a\u4f8b\u5982\u4e0b\uff1a</p> <pre><code>@Override\npublic void getSatelliteUsedNums(SatelliteNumber satNumbers) throws RemoteException {\n    Log.d(TAG, \"Number of visible satellites\uff1a\" + satNumbers.getSatNum());\n    Log.d(TAG, \"Number of available satellites\uff1a\" + satNumbers.getSatUsedNum());\n}\n</code></pre>"},{"location":"%E6%8E%A5%E6%94%B6%E6%9C%BA%E9%80%9A%E4%BF%A1/#_5","title":"\u89c6\u9891\u6d41\u6570\u636e\u83b7\u53d6","text":"<p>\u672c\u90e8\u5206\u4ecb\u7ecd\u5982\u4f55\u901a\u8fc7SDK\u4eceRTK\u83b7\u53d6\u89c6\u9891\u6d41\u6570\u636e\u3002\u5047\u8bbe\u60a8\u7684RTK\u8bbe\u5907\u540c\u65f6\u5177\u5907\u4e0b\u6444\u548c\u524d\u6444\u7684\u529f\u80fd\uff0c\u6838\u5fc3\u6b65\u9aa4\u5982\u4e0b\uff1a</p> <ol> <li>\u83b7\u53d6\u6444\u50cf\u5934\u56fe\u50cf\u6570\u636e\uff1b</li> <li>\u5c06\u56fe\u50cf\u6570\u636e\u6e32\u67d3\u5230\u754c\u9762\u3002</li> </ol>"},{"location":"%E6%8E%A5%E6%94%B6%E6%9C%BA%E9%80%9A%E4%BF%A1/#_6","title":"\u83b7\u53d6\u56fe\u50cf\u6570\u636e\u5e76\u6e32\u67d3\u5230\u754c\u9762","text":"<p>\u60a8\u53ef\u4ee5\u4f7f\u7528 RtkCamera \u7c7b\u6307\u5b9a\u8981\u83b7\u53d6\u56fe\u50cf\u6570\u636e\u7684\u6444\u50cf\u5934\u7c7b\u578b\uff0c\u7136\u540e\u901a\u8fc7\u8bbe\u7f6e\u56de\u8c03\u51fd\u6570\u6765\u83b7\u53d6\u6bcf\u4e00\u5e27\u7684\u56fe\u50cf\u6570\u636e\uff0c\u5177\u4f53\u5982\u4e0b\uff1a</p> <pre><code>// CameraInfo\nprivate static class CameraInfo {\n    ImageView imageView;\n    Button button;\n    RtkCamera camera;\n    Bitmap bitmap;\n}\n\n/**\n * @param cameraInfo: camera info\n * @author xuzengbao\n * @description set camera callback\n * @date 2024/11/15 10:09\n */\nprivate void setupCameraCallback(CameraInfo cameraInfo) {\n    cameraInfo.camera.setCallback(new IRtkCameraCallback() {\n        @Override\n        public void onStatusChanged(@NonNull RtkCameraStatus status,\n                                    @NonNull RtkCameraParam cameraParam) {\n            // Handle state change logic\n        }\n\n        @Override\n        public void onReceivedPictureSize(int pictureWidth, int pictureHeight) {\n            // Logic for processing size changes of received pictures\n        }\n\n        @Override\n        public void onDataReceived(@NonNull VideoFrame vf) {\n            if (cameraInfo.camera.getCameraStatus() != RtkCameraStatus.OPENED) {\n                return;\n            }\n\n            // get image data\n            byte[] imageData = vf.getJpegBuffer();\n\n            if (imageData != null) {\n                // Decoding Bitmap\n                Bitmap bitmap =\n                        BitmapFactory.decodeByteArray(imageData, 0, imageData.length);\n                runOnUiThread(() -&gt; {\n                    // Recycle old Bitmap to avoid memory leaks\n                    if (cameraInfo.bitmap != null &amp;&amp; !cameraInfo.bitmap.isRecycled()) {\n                        cameraInfo.bitmap.recycle();\n                    }\n                    cameraInfo.bitmap = bitmap;\n                    // update ImageView\n                    cameraInfo.imageView.setImageBitmap(bitmap);\n                });\n            }\n        }\n\n        @Override\n        public void onError(int error) {\n            LogWrapper.printException(new Exception(\"Camera error code: \" + error));\n        }\n    });\n}\n</code></pre>"},{"location":"%E6%8E%A5%E6%94%B6%E6%9C%BA%E9%80%9A%E4%BF%A1/#_7","title":"\u5b8c\u6574\u4ee3\u7801","text":""},{"location":"%E6%8E%A5%E6%94%B6%E6%9C%BA%E9%80%9A%E4%BF%A1/#_8","title":"\u5e03\u5c40\u6587\u4ef6\u4ee3\u7801\uff1a","text":"<pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:id=\"@+id/main\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\"\n    tools:context=\".video.VideoStreamActivity\"&gt;\n\n    &lt;LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"0dp\"\n        android:layout_weight=\"1\"\n        android:background=\"#000000\"\n        android:orientation=\"vertical\"&gt;\n\n        &lt;ImageView\n            android:id=\"@+id/viewGroundVideo\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"0dp\"\n            android:layout_weight=\"1\"/&gt;\n\n        &lt;ImageView\n            android:id=\"@+id/viewFrontVideo\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"0dp\"\n            android:layout_weight=\"1\"/&gt;\n\n    &lt;/LinearLayout&gt;\n\n\n    &lt;LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"horizontal\"\n        android:padding=\"8dp\"&gt;\n\n        &lt;!-- Ground Camera Label + Button --&gt;\n        &lt;LinearLayout\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:gravity=\"center_vertical\"\n            android:orientation=\"horizontal\"&gt;\n\n            &lt;TextView\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"Ground Camera:\" /&gt;\n\n            &lt;Button\n                android:id=\"@+id/btnGroundCamera\"\n                android:layout_width=\"0dp\"\n                android:layout_height=\"wrap_content\"\n                android:layout_weight=\"1\"\n                android:text=\"On\" /&gt;\n        &lt;/LinearLayout&gt;\n\n        &lt;!-- Front Camera Label + Button --&gt;\n        &lt;LinearLayout\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:gravity=\"center_vertical\"\n            android:orientation=\"horizontal\"&gt;\n\n            &lt;TextView\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"Front Camera:\" /&gt;\n\n            &lt;Button\n                android:id=\"@+id/btnFrontCamera\"\n                android:layout_width=\"0dp\"\n                android:layout_height=\"wrap_content\"\n                android:layout_weight=\"1\"\n                android:text=\"On\" /&gt;\n        &lt;/LinearLayout&gt;\n\n    &lt;/LinearLayout&gt;\n\n&lt;/LinearLayout&gt;\n</code></pre>"},{"location":"%E6%8E%A5%E6%94%B6%E6%9C%BA%E9%80%9A%E4%BF%A1/#activity","title":"Activity \u4ee3\u7801\uff1a","text":"<pre><code>/**\n * @author xuzengbao\n * @description video stream view\n * @date 2024/11/15 09:53\n */\npublic class VideoStreamActivity extends AppCompatActivity {\n\n    private static class CameraInfo {\n        ImageView imageView;\n        Button button;\n        RtkCamera camera;\n        Bitmap bitmap;\n    }\n\n    private final Map&lt;RtkCameraType, CameraInfo&gt; mCameraInfos = new HashMap&lt;&gt;();\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_video_stream);\n\n        setupCameraInfo(RtkCameraType.GROUND_CAMERA, R.id.viewGroundVideo, R.id.btnGroundCamera);\n        setupCameraInfo(RtkCameraType.FRONT_CAMERA, R.id.viewFrontVideo, R.id.btnFrontCamera);\n    }\n\n    /**\n     * @param type: camera type\n     * @param viewId: resource id\n     * @param buttonId: resource id\n     * @author xuzengbao\n     * @description init camera info\n     * @date 2024/11/15 10:07\n     */\n    private void setupCameraInfo(@NonNull RtkCameraType type, int viewId, int buttonId) {\n        ImageView imageView = findViewById(viewId);\n        Button button = findViewById(buttonId);\n        button.setOnClickListener(view -&gt; toggleRendering(type));\n\n        CameraInfo cameraInfo = new CameraInfo();\n        cameraInfo.imageView = imageView;\n        cameraInfo.button = button;\n\n        mCameraInfos.put(type, cameraInfo);\n    }\n\n    /**\n     * @param type: camera type\n     * @author xuzengbao\n     * @description on or off camera\n     * @date 2024/11/15 10:08\n     */\n    private void toggleRendering(@NonNull RtkCameraType type) {\n        CameraInfo cameraInfo = mCameraInfos.get(type);\n        if (cameraInfo == null) {\n            return;\n        }\n\n        if (cameraInfo.camera == null) {\n            cameraInfo.camera = new RtkCamera(type);\n        }\n\n        if (cameraInfo.camera.getCameraStatus() == RtkCameraStatus.OPENED) {\n            cameraInfo.button.setText(\"On\");\n            closeCamera(cameraInfo.camera);\n        } else {\n            setupCameraCallback(cameraInfo);\n            cameraInfo.camera.open();\n            cameraInfo.button.setText(\"Off\");\n        }\n    }\n\n/**\n * @param cameraInfo: camera info\n * @author xuzengbao\n * @description set camera callback\n * @date 2024/11/15 10:09\n */\nprivate void setupCameraCallback(CameraInfo cameraInfo) {\n    cameraInfo.camera.setCallback(new IRtkCameraCallback() {\n        @Override\n        public void onStatusChanged(@NonNull RtkCameraStatus status,\n                                    @NonNull RtkCameraParam cameraParam) {\n            // Handle state change logic\n        }\n\n        @Override\n        public void onReceivedPictureSize(int pictureWidth, int pictureHeight) {\n            // Logic for processing size changes of received pictures\n        }\n\n        @Override\n        public void onDataReceived(@NonNull VideoFrame vf) {\n            if (cameraInfo.camera.getCameraStatus() != RtkCameraStatus.OPENED) {\n                return;\n            }\n\n            // get image data\n            byte[] imageData = vf.getJpegBuffer();\n\n            if (imageData != null) {\n                // Decoding Bitmap in the background thread\n                Bitmap bitmap =\n                        BitmapFactory.decodeByteArray(imageData, 0, imageData.length);\n                runOnUiThread(() -&gt; {\n                    // Recycle old Bitmap to avoid memory leaks\n                    if (cameraInfo.bitmap != null &amp;&amp; !cameraInfo.bitmap.isRecycled()) {\n                        cameraInfo.bitmap.recycle();\n                    }\n                    cameraInfo.bitmap = bitmap;\n                    // update ImageView\n                    cameraInfo.imageView.setImageBitmap(bitmap);\n                });\n            }\n        }\n\n        @Override\n        public void onError(int error) {\n            LogWrapper.printException(new Exception(\"Camera error code: \" + error));\n        }\n    });\n}\n\n    private void closeCamera(@Nullable RtkCamera rtkCamera) {\n        if (rtkCamera != null) {\n            rtkCamera.close();\n        }\n    }\n\n    /**\n     * @author xuzengbao\n     * @description release resources\n     * @date 2024/11/15 10:10\n     */\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        for (CameraInfo cameraInfo : mCameraInfos.values()) {\n            if (cameraInfo.camera != null) {\n                closeCamera(cameraInfo.camera);\n            }\n            if (cameraInfo.bitmap != null &amp;&amp; !cameraInfo.bitmap.isRecycled()) {\n                cameraInfo.bitmap.recycle();\n                cameraInfo.bitmap = null;\n            }\n        }\n        mCameraInfos.clear();\n    }\n}\n</code></pre>"},{"location":"%E8%BF%9E%E6%8E%A5/","title":"\u8fde\u63a5","text":""},{"location":"%E8%BF%9E%E6%8E%A5/#_1","title":"\u8fde\u63a5\u65b9\u5f0f","text":""},{"location":"%E8%BF%9E%E6%8E%A5/#_2","title":"\u84dd\u7259\u8fde\u63a5","text":"<p>\u84dd\u7259\u8fde\u63a5\u4e3b\u8981\u6b65\u9aa4\u548c\u4ee3\u7801\u5982\u4e0b\uff1a</p> <ol> <li>\u901a\u8fc7 ReceiverConnectionOption \u914d\u7f6e\u8fde\u63a5\u53c2\u6570\uff1b</li> <li>\u901a\u8fc7\u521d\u59cb\u5316SDK\u4e2d\u5f97\u5230\u7684 service \u6765\u83b7\u53d6 IReceiverConnectManager \u5bf9\u8c61</li> <li>\u5c06\u201c1\u201d\u4e2d\u5f97\u5230\u7684 ReceiverConnectionOption \u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165IReceiverConnectManager \u5bf9\u8c61\u7684 connect \u65b9\u6cd5\u4e2d</li> </ol> <pre><code>    // Connection event\n    mBTConnect.setOnClickListener(new View.OnClickListener() {\n     \u00a0 \u00a0@Override\n     \u00a0 \u00a0public void onClick(View view) {\n     \u00a0 \u00a0 \u00a0 \u00a0// Connect directly through the SDK\n     \u00a0 \u00a0 \u00a0 \u00a0ReceiverConnectionOption option = new ReceiverConnectionOption()\n     \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  .setConnectionType(ConnectionType.CONNECTION_BLUETOOTH)\n     \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  .setProductName(\"SMART-RTK\")\n     \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  .setBluetoothName(\"GNSS-9999848\");\n     \u00a0 \u00a0 \u00a0 \n     \u00a0 \u00a0 \u00a0 \u00a0try {\n     \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// Get receiverConnectManager through mService and then connect using receiverConnectManager\n     \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0IReceiverConnectManager receiverConnectManager = IReceiverConnectManager\n     \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  .Stub.asInterface(mService.getReceiverConnectManager());\n     \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// Connect using receiverConnectManager\n     \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0if (!receiverConnectManager.connect(option)) {\n     \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// Connection failure\n     \u00a0          }\n     \u00a0 \u00a0 \u00a0  } catch (RemoteException e) {\n     \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0throw new RuntimeException(e);\n     \u00a0 \u00a0 \u00a0  }\n     \u00a0  }\n    });\n</code></pre>"},{"location":"%E8%BF%9E%E6%8E%A5/#_3","title":"\u84dd\u7259\u6ce8\u5165\u8fde\u63a5\uff08\u53ef\u9009\uff09","text":"<p>\u63a8\u8350\u4f7f\u7528\u666e\u901a\u7684\u84dd\u7259\u8fde\u63a5\u65b9\u5f0f\uff0c\u8fd9\u91cc\u84dd\u7259\u6ce8\u5165\u7684\u8fde\u63a5\u65b9\u5f0f\u4ec5\u4e3a\u6709\u7279\u6b8a\u9700\u6c42\u7684\u5f00\u53d1\u8005\u63d0\u4f9b\u9009\u62e9\u3002</p>"},{"location":"%E8%BF%9E%E6%8E%A5/#_4","title":"\u6b65\u9aa4\u4e00\uff1a\u84dd\u7259\u8fde\u63a5\u7684\u5b9e\u73b0","text":"<p>\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u5f00\u53d1\u8005\u9700\u8981\u7ee7\u627f<code>BaseReceiverConnectionInjector</code>\u7c7b\uff0c\u81ea\u884c\u5b9e\u73b0\u84dd\u7259\u8fde\u63a5\u90e8\u5206\uff0c\u5e76\u5c06\u5176\u6ce8\u5165\u5230<code>ReceiverConnectionInjectManager</code>\u4e2d\u3002\u8fd9\u91cc\u7ee7\u627f BaseReceiverConnectionInjector \u9700\u8981\u5b9e\u73b0\u7684\u4e3b\u8981\u6709\u56db\u4e2a\u65b9\u6cd5\uff0c\u5177\u4f53\u6b65\u9aa4\u548c\u4ee3\u7801\u5982\u4e0b\uff1a</p> <ol> <li>\u5b9e\u73b0 connnect \u65b9\u6cd5\uff0c\u8fd9\u90e8\u5206\u60a8\u9700\u8981\u81ea\u884c\u5b9e\u73b0\u84dd\u7259\u8fde\u63a5\u7684socket\uff1b</li> <li>\u5b9e\u73b0 disConnect \u65b9\u6cd5\uff1b</li> <li>\u5b9e\u73b0 receiver \u65b9\u6cd5\uff0c\u8fd9\u91cc\u76f4\u63a5\u8c03\u7528\u7236\u7c7b\u65b9\u6cd5\u5373\u53ef\uff1b</li> <li>\u5b9e\u73b0 writeDataToDevice \u65b9\u6cd5\u3002</li> </ol> <pre><code>/**\n * BluetoothConnectionInjector handles the establishment, maintenance, and termination\n * of a Bluetooth connection. It extends BaseReceiverConnectionInjector to inherit \n * common connection functionalities.\n */\npublic class BluetoothConnectionInjector extends BaseReceiverConnectionInjector {\n \u00a0 \u00a0/**\n \u00a0 \u00a0 * Log tag for debugging.\n \u00a0 \u00a0 */\n \u00a0 \u00a0private static final String TAG = \"BluetoothReceiverConn\";\n \u00a0 \u00a0/**\n \u00a0 \u00a0 * UUID for the Bluetooth service.\n \u00a0 \u00a0 */\n \u00a0 \u00a0private static final UUID MY_UUID = \n \u00a0 \u00a0 \u00a0UUID.fromString(\"00001101-0000-1000-8000-00805F9B34FB\");\n \u00a0 \u00a0/**\n \u00a0 \u00a0 * Bluetooth device to connect to.\n \u00a0 \u00a0 */\n \u00a0 \u00a0private final BluetoothDevice mBluetoothDevice;\n \u00a0 \u00a0/**\n \u00a0 \u00a0 * Bluetooth socket for the connection.\n \u00a0 \u00a0 */\n \u00a0 \u00a0private BluetoothSocket mBluetoothSocket;\n \u00a0 \u00a0/**\n \u00a0 \u00a0 * Input stream for reading data from the Bluetooth connection.\n \u00a0 \u00a0 */\n \u00a0 \u00a0private InputStream mInputStream;\n \u00a0 \u00a0/**\n \u00a0 \u00a0 * Output stream for writing data to the Bluetooth connection.\n \u00a0 \u00a0 */\n \u00a0 \u00a0private OutputStream mOutputStream;\n \u00a0 \u00a0/**\n \u00a0 \u00a0 * Constructor initializes the Bluetooth device by its name.\n \u00a0 \u00a0 *\n \u00a0 \u00a0 * @param btName Name of the Bluetooth device to connect to.\n \u00a0 \u00a0 */\n \u00a0 \u00a0public BluetoothConnectionInjector(@NonNull String btName) {\n \u00a0 \u00a0 \u00a0 \u00a0this.mBluetoothDevice = getBluetoothDeviceByName(btName);\n \u00a0  }\n \u00a0 \u00a0\n \u00a0 \u00a0/**\n \u00a0 \u00a0 * Establishes the Bluetooth connection.\n \u00a0 \u00a0 *\n \u00a0 \u00a0 * @param context Application context.\n \u00a0 \u00a0 * @return true if connection is successful, false otherwise.\n \u00a0 \u00a0 */\n \u00a0 \u00a0@Override\n \u00a0 \u00a0public boolean connect(@NonNull Context context) {\n \u00a0 \u00a0 \u00a0 \u00a0try {\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0initializeSocket();\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0startDataReceiverThread();\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0onStateChanged(EnumConnectionStatus.CONNECT_SUCCESED);\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return true;\n \u00a0 \u00a0 \u00a0  } catch (IOException e) {\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0handleConnectionError(e);\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return false;\n \u00a0 \u00a0 \u00a0  }\n \u00a0  }\n\n \u00a0 \u00a0/**\n \u00a0 \u00a0 * Initializes the Bluetooth socket and streams.\n \u00a0 \u00a0 *\n \u00a0 \u00a0 * @throws IOException if an I/O error occurs.\n \u00a0 \u00a0 */\n \u00a0 \u00a0private void initializeSocket() throws IOException {\n \u00a0 \u00a0 \u00a0 \u00a0mBluetoothSocket = mBluetoothDevice.createRfcommSocketToServiceRecord(MY_UUID);\n \u00a0 \u00a0 \u00a0 \u00a0mBluetoothSocket.connect();\n \u00a0 \u00a0 \u00a0 \u00a0mInputStream = mBluetoothSocket.getInputStream();\n \u00a0 \u00a0 \u00a0 \u00a0mOutputStream = mBluetoothSocket.getOutputStream();\n \u00a0  }\n\n \u00a0 \u00a0/**\n \u00a0 \u00a0 * Starts a thread to receive data from the Bluetooth connection.\n \u00a0 \u00a0 */\n \u00a0 \u00a0private void startDataReceiverThread() {\n \u00a0 \u00a0 \u00a0 \u00a0new Thread(new Runnable() {\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0@Override\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0public void run() {\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0try {\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0byte[] buffer = new byte[1024];\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0int bytesRead;\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0while ((bytesRead = mInputStream.read(buffer)) &gt; 0) {\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0byte[] data = new byte[bytesRead];\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0System.arraycopy(buffer, 0, data, 0, bytesRead);\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0receiver(data);\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  }\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  } catch (IOException e) {\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0handleDataReceiverError(e);\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  } finally {\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0disConnect();\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  }\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  }\n \u00a0 \u00a0 \u00a0  }).start();\n \u00a0  }\n\n \u00a0 \u00a0/**\n \u00a0 \u00a0 * Handles connection errors by logging and disconnecting.\n \u00a0 \u00a0 *\n \u00a0 \u00a0 * @param e IOException that occurred.\n \u00a0 \u00a0 */\n \u00a0 \u00a0private void handleConnectionError(IOException e) {\n \u00a0 \u00a0 \u00a0 \u00a0Log.e(TAG, \"Connection error: \", e);\n \u00a0 \u00a0 \u00a0 \u00a0disConnect();\n \u00a0  }\n\n \u00a0 \u00a0/**\n \u00a0 \u00a0 * Handles data receiver errors by logging.\n \u00a0 \u00a0 *\n \u00a0 \u00a0 * @param e IOException that occurred.\n \u00a0 \u00a0 */\n \u00a0 \u00a0private void handleDataReceiverError(IOException e) {\n \u00a0 \u00a0 \u00a0 \u00a0Log.e(TAG, \"Data receiver error: \", e);\n \u00a0  }\n\n \u00a0 \u00a0/**\n \u00a0 \u00a0 * Disconnects the Bluetooth connection and closes all streams.\n \u00a0 \u00a0 */\n \u00a0 \u00a0@Override\n \u00a0 \u00a0public void disConnect() {\n \u00a0 \u00a0 \u00a0 \u00a0closeStream(mInputStream);\n \u00a0 \u00a0 \u00a0 \u00a0closeStream(mOutputStream);\n \u00a0 \u00a0 \u00a0 \u00a0closeSocket(mBluetoothSocket);\n \u00a0  }\n\n \u00a0 \u00a0/**\n \u00a0 \u00a0 * Closes a given stream.\n \u00a0 \u00a0 *\n \u00a0 \u00a0 * @param stream Stream to close.\n \u00a0 \u00a0 */\n \u00a0 \u00a0private void closeStream(@Nullable Closeable stream) {\n \u00a0 \u00a0 \u00a0 \u00a0if (stream != null) {\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0try {\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0stream.close();\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  } catch (IOException e) {\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Log.e(TAG, \"Error closing stream: \", e);\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  }\n \u00a0 \u00a0 \u00a0  }\n \u00a0  }\n\u200b\n \u00a0 \u00a0/**\n \u00a0 \u00a0 * Closes the Bluetooth socket.\n \u00a0 \u00a0 *\n \u00a0 \u00a0 * @param socket Bluetooth socket to close.\n \u00a0 \u00a0 */\n \u00a0 \u00a0private void closeSocket(@Nullable BluetoothSocket socket) {\n \u00a0 \u00a0 \u00a0 \u00a0if (socket != null) {\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0try {\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0socket.close();\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  } catch (IOException e) {\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Log.e(TAG, \"Error closing socket: \", e);\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  }\n \u00a0 \u00a0 \u00a0  }\n \u00a0  }\n\n \u00a0 \u00a0/**\n \u00a0 \u00a0 * Writes data to the Bluetooth device.\n \u00a0 \u00a0 *\n \u00a0 \u00a0 * @param cmd Command containing the data to write.\n \u00a0 \u00a0 * @return true if data is successfully written, false otherwise.\n \u00a0 \u00a0 */\n \u00a0 \u00a0@Override\n \u00a0 \u00a0public boolean writeDataToDevice(@NonNull CMD cmd) {\n \u00a0 \u00a0 \u00a0 \u00a0if (mOutputStream == null) return false;\n\n \u00a0 \u00a0 \u00a0 \u00a0try {\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0mOutputStream.write(cmd.cmd);\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0mOutputStream.flush();\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return true;\n \u00a0 \u00a0 \u00a0  } catch (IOException e) {\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Log.e(TAG, \"Error writing data: \", e);\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return false;\n \u00a0 \u00a0 \u00a0  }\n \u00a0  }\n\n \u00a0 \u00a0/**\n \u00a0 \u00a0 * Receives data and passes it to the superclass method.\n \u00a0 \u00a0 *\n \u00a0 \u00a0 * @param data Data received from the Bluetooth connection.\n \u00a0 \u00a0 */\n \u00a0 \u00a0@Override\n \u00a0 \u00a0public void receiver(byte[] data) {\n \u00a0 \u00a0 \u00a0 \u00a0super.receiver(data);\n \u00a0  }\n\n \u00a0 \u00a0/**\n \u00a0 \u00a0 * Gets a Bluetooth device by its name.\n \u00a0 \u00a0 *\n \u00a0 \u00a0 * @param btName Name of the Bluetooth device.\n \u00a0 \u00a0 * @return BluetoothDevice if found, null otherwise.\n \u00a0 \u00a0 */\n \u00a0 \u00a0public static BluetoothDevice getBluetoothDeviceByName(@NonNull String btName) {\n \u00a0 \u00a0 \u00a0 \u00a0BluetoothAdapter bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();\n \u00a0 \u00a0 \u00a0 \u00a0if (bluetoothAdapter == null) {\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return null;\n \u00a0 \u00a0 \u00a0  }\n \u00a0 \u00a0 \u00a0 \u00a0for (BluetoothDevice device : bluetoothAdapter.getBondedDevices()) {\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0if (btName.equalsIgnoreCase(device.getName())) {\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return device;\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  }\n \u00a0 \u00a0 \u00a0  }\n \u00a0 \u00a0 \u00a0 \u00a0return null;\n \u00a0  }\n}\n</code></pre>"},{"location":"%E8%BF%9E%E6%8E%A5/#_5","title":"\u6b65\u9aa4\u4e8c\uff1a\u84dd\u7259\u6ce8\u5165","text":"<p>\u5bf9\u4e0a\u9762\u81ea\u884c\u5b9e\u73b0\u7684\u84dd\u7259\u8fde\u63a5\u5668\uff0c\u60a8\u9700\u8981\u5c06\u5b83\u7684\u5b9e\u4f8b\u5316\u5bf9\u8c61\u6ce8\u5165\u5230 ReceiverConnectionInjectManager\u4e2d\uff0c\u7136\u540e\u9700\u8981\u6784\u5efaReceiverConnectionOption\u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165IReceiverConnectManager \u5bf9\u8c61\u7684 connect \u65b9\u6cd5\u4e2d\u3002</p> <pre><code>// Establish connection using Bluetooth injection method\nBluetoothConnectionInjector injector = \n \u00a0new BluetoothConnectionInjector(\"GNSS-9999848\");\nReceiverConnectionInjectManager.getInstance().inject(injector);\nReceiverConnectionOption option = new ReceiverConnectionOption()\n \u00a0 \u00a0 \u00a0  .setConnectionType(ConnectionType.CONNECTION_BLUETOOTH)\n \u00a0 \u00a0 \u00a0  .setProductName(\"SMART-RTK\");\ntry {\n \u00a0 \u00a0// Get receiverConnectManager through mService and then connect using receiverConnectManager\n \u00a0 \u00a0IReceiverConnectManager receiverConnectManager = IReceiverConnectManager\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  .Stub.asInterface(mService.getReceiverConnectManager());\n \u00a0 \u00a0// Connect using receiverConnectManager\n \u00a0 \u00a0receiverConnectManager.connect(option);\n} catch (RemoteException e) {\n \u00a0 \u00a0throw new RuntimeException(e);\n}\n</code></pre>"},{"location":"%E8%BF%9E%E6%8E%A5/#wifi","title":"WIFI\u8fde\u63a5","text":"<p>WIFI\u8fde\u63a5\u4e3b\u8981\u6b65\u9aa4\u548c\u4ee3\u7801\u5982\u4e0b\uff1a</p> <ol> <li>\u901a\u8fc7 ReceiverConnectionOption \u914d\u7f6e\u8fde\u63a5\u53c2\u6570\uff1b</li> <li>\u901a\u8fc7\u521d\u59cb\u5316SDK\u4e2d\u5f97\u5230\u7684 service \u6765\u83b7\u53d6 IReceiverConnectManager \u5bf9\u8c61</li> <li>\u5c06\u201c1\u201d\u4e2d\u5f97\u5230\u7684 ReceiverConnectionOption \u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165IReceiverConnectManager \u5bf9\u8c61\u7684 connect \u65b9\u6cd5\u4e2d</li> </ol> <pre><code>    // Connection event\n    mBTConnect.setOnClickListener(new View.OnClickListener() {\n     \u00a0 \u00a0@Override\n     \u00a0 \u00a0public void onClick(View view) {\n     \u00a0 \u00a0 \u00a0 \u00a0ReceiverConnectionOption option = new ReceiverConnectionOption()\n     \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  .setConnectionType(ConnectionType.CONNECTION_WIFI)\n     \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  .setProductName(\"SMART-RTK\");\n     \u00a0 \u00a0 \u00a0 \n     \u00a0 \u00a0 \u00a0 \u00a0try {\n     \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// Get receiverConnectManager through mService and then connect using receiverConnectManager\n     \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0IReceiverConnectManager receiverConnectManager = IReceiverConnectManager\n     \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  .Stub.asInterface(mService.getReceiverConnectManager());\n     \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// Connect using receiverConnectManager\n     \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0if (!receiverConnectManager.connect(option)) {\n     \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// Connection failure\n     \u00a0          }\n     \u00a0 \u00a0 \u00a0  } catch (RemoteException e) {\n     \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0throw new RuntimeException(e);\n     \u00a0 \u00a0 \u00a0  }\n     \u00a0  }\n    });\n\n    // Disconnection event\n    mBTDisConnect.setOnClickListener(new View.OnClickListener() {\n     \u00a0 \u00a0@Override\n     \u00a0 \u00a0public void onClick(View view) {\n     \u00a0 \u00a0 \u00a0 \u00a0try {\n     \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0IReceiverConnectManager receiverConnectManager = IReceiverConnectManager\n     \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  .Stub.asInterface(mService.getReceiverConnectManager());\n     \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0if (receiverConnectManager != null) {\n     \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0receiverConnectManager.disConnect();\n     \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  }\n     \u00a0 \u00a0 \u00a0  } catch (RemoteException e) {\n     \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0throw new RuntimeException(e);\n     \u00a0 \u00a0 \u00a0  }\n     \u00a0  }\n    });\n</code></pre>"},{"location":"%E8%BF%9E%E6%8E%A5/#_6","title":"\u672c\u5730\u8fde\u63a5","text":"<p>\u76ee\u524d\u5927\u591a\u6570Android\u8bbe\u5907\u90fd\u5177\u5907\u63a5\u6536\u536b\u661f\u4fe1\u53f7\u6765\u5b9e\u73b0\u5b9a\u4f4d\u7684\u529f\u80fd\uff0c\u57fa\u4e8e\u6b64\uff0c\u60a8\u53ef\u4ee5\u5728\u4e0d\u901a\u8fc7\u84dd\u7259\u3001WIFI\u8fde\u63a5RTK\u7684\u60c5\u51b5\u4e0b\u505a\u4e00\u4e9b\u529f\u80fd\u6d4b\u8bd5\uff0c\u4e5f\u53ef\u4ee5\u4ec5\u901a\u8fc7\u672c\u5730\u8fde\u63a5\u6765\u5f00\u53d1\u60a8\u9700\u8981\u7684\u529f\u80fd\u3002\u672c\u7ae0\u8282\u4e3b\u8981\u4ecb\u7ecd\u5982\u4f55\u901a\u8fc7SDK\u5b9e\u73b0\u672c\u5730\u8fde\u63a5\uff0c\u8fde\u63a5\u6b65\u9aa4\u540c\u84dd\u7259\u8fde\u63a5\u7c7b\u4f3c\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\uff0c\u4ec5\u7ed9\u51fa\u76f8\u5173\u4ee3\u7801\u3002</p> <pre><code>// Connection event\n    mLocalConnect.setOnClickListener(new View.OnClickListener() {\n     \u00a0 \u00a0@Override\n     \u00a0 \u00a0public void onClick(View view) {\n     \u00a0 \u00a0 \u00a0 \u00a0ReceiverConnectionOption option = new ReceiverConnectionOption()\n     \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  .setConnectionType(ConnectionType.CONNECTION_ANDROID)\n     \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  .setProductName(\"LT40\");\n     \u00a0 \u00a0 \u00a0 \n     \u00a0 \u00a0 \u00a0 \u00a0try {\n     \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// Get receiverConnectManager through mService and then connect using receiverConnectManager\n     \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0IReceiverConnectManager receiverConnectManager = IReceiverConnectManager\n     \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  .Stub.asInterface(mService.getReceiverConnectManager());\n     \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// Connect using receiverConnectManager\n     \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0if (!receiverConnectManager.connect(option)) {\n     \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0// Connection failure\n     \u00a0          }\n     \u00a0 \u00a0 \u00a0  } catch (RemoteException e) {\n     \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0throw new RuntimeException(e);\n     \u00a0 \u00a0 \u00a0  }\n     \u00a0  }\n    });\n    \u200b\n    // Disconnection event\n    mLocalDisConnect.setOnClickListener(new View.OnClickListener() {\n     \u00a0 \u00a0@Override\n     \u00a0 \u00a0public void onClick(View view) {\n     \u00a0 \u00a0 \u00a0 \u00a0try {\n     \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0IReceiverConnectManager receiverConnectManager = IReceiverConnectManager\n     \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  .Stub.asInterface(mService.getReceiverConnectManager());\n     \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0if (receiverConnectManager != null) {\n     \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0receiverConnectManager.disConnect();\n     \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  }\n     \u00a0 \u00a0 \u00a0  } catch (RemoteException e) {\n     \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0throw new RuntimeException(e);\n     \u00a0 \u00a0 \u00a0  }\n     \u00a0  }\n    });\n</code></pre>"},{"location":"%E8%BF%9E%E6%8E%A5/#lt800h","title":"LT800H \u8fde\u63a5","text":"<p>\u53c2\u8003\u521d\u59cb\u5316SDK\uff0c\u60a8\u53ea\u9700\u8981\u4fee\u6539\u8fde\u63a5\u90e8\u5206\u7684\u4ee3\u7801\u5373\u53ef\uff0c\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>mBTConnect.setOnClickListener(new View.OnClickListener() {\n \u00a0 \u00a0@Override\n \u00a0 \u00a0public void onClick(View view) {\n \u00a0 \u00a0 \u00a0 \u00a0// Areas that need to be revised\n \u00a0 \u00a0 \u00a0 \u00a0ReceiverConnectionOption option = new ReceiverConnectionOption()\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  .setConnectionType(ConnectionType.CONNECTION_ANDROID)\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  .setProductName(\"LT800H\");\n \u00a0 \u00a0 \u00a0 // ......\n \u00a0  }\n});\n</code></pre>"}]}